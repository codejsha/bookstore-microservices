// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/codejsha/bookstore-microservices/commonlib-go/pkg/client"
	"github.com/codejsha/bookstore-microservices/commonlib-go/pkg/config"
	"github.com/codejsha/bookstore-microservices/commonlib-go/pkg/logging"
	"github.com/codejsha/bookstore-microservices/commonlib-go/pkg/object"
	config2 "github.com/codejsha/bookstore-microservices/identity/internal/config"
	"github.com/codejsha/bookstore-microservices/identity/internal/domain/service"
	"github.com/codejsha/bookstore-microservices/identity/internal/infrastructure"
	"github.com/codejsha/bookstore-microservices/identity/internal/infrastructure/adapter/keycloak"
	"github.com/codejsha/bookstore-microservices/identity/internal/infrastructure/adapter/protosvc"
	"github.com/codejsha/bookstore-microservices/identity/internal/infrastructure/adapter/web"
	"github.com/codejsha/bookstore-microservices/identity/internal/infrastructure/support"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeServer(env object.Env, metadata *config.Metadata) *infrastructure.Infra {
	configConfig := config2.NewConfig(env)
	serverConfig := config2.ProvideServerConfig(configConfig)
	appConfig := config2.ProvideAppConfig(configConfig)
	logHelper := logging.NewLogHelper(appConfig)
	restyClient := client.NewRestyClient()
	openIDConnectAPI := keycloak.NewOpenIDConnectClient(configConfig, restyClient)
	adminTokenHelper := keycloak.NewAdminTokenHelper(configConfig, restyClient)
	usersAPI := keycloak.NewUsersClient(configConfig, restyClient, adminTokenHelper)
	identityUseCase := service.NewIdentityService(configConfig, openIDConnectAPI, usersAPI)
	identityAPI := web.NewIdentityController(identityUseCase)
	ginServer := support.NewGinServer(serverConfig, logHelper, identityAPI)
	grpcConfig := config2.ProvideGrpcConfig(configConfig)
	userGrpcServer := protosvc.NewUserGrpcServer(identityUseCase)
	grpcServer := support.NewGrpcServer(grpcConfig, userGrpcServer)
	telemetryConfig := config2.ProvideTelemetryConfig(configConfig)
	telemetryManager := support.NewTelemetryManager(metadata, telemetryConfig)
	infra := infrastructure.NewInfra(ginServer, grpcServer, telemetryManager)
	return infra
}

// wire.go:

var AppConfigProviderSet = wire.NewSet(config2.ProvideAppConfig)

var ServerConfigProviderSet = wire.NewSet(config2.ProvideServerConfig)

var TelemetryConfigProviderSet = wire.NewSet(config2.ProvideTelemetryConfig)

var GrpcConfigProviderSet = wire.NewSet(config2.ProvideGrpcConfig)

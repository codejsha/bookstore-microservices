// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

// Get client-level roles for the client that are in the role's composite
// (operationId: AdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet)
type AdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetParam struct {
	// realm name (not id!)
	Realm      string `uri:"realm"`
	ClientUuid string `uri:"clientUuid"`
	RoleId     string `uri:"role-id"`
}

// Remove a set of roles from the role's composite
// (operationId: AdminRealmsRealmRolesByIdRoleIdCompositesDelete)
type AdminRealmsRealmRolesByIdRoleIdCompositesDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// Role id
	RoleId string `uri:"role-id"`
}

// Get role's children Returns a set of role's children provided the role is a composite.
// (operationId: AdminRealmsRealmRolesByIdRoleIdCompositesGet)
type AdminRealmsRealmRolesByIdRoleIdCompositesGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	RoleId string `uri:"role-id"`
	First  int32  `form:"first,omitempty"`
	Max    int32  `form:"max,omitempty"`
	Search string `form:"search,omitempty"`
}

// Make the role a composite role by associating some child roles
// (operationId: AdminRealmsRealmRolesByIdRoleIdCompositesPost)
type AdminRealmsRealmRolesByIdRoleIdCompositesPostParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	RoleId string `uri:"role-id"`
}

// Get realm-level roles that are in the role's composite
// (operationId: AdminRealmsRealmRolesByIdRoleIdCompositesRealmGet)
type AdminRealmsRealmRolesByIdRoleIdCompositesRealmGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	RoleId string `uri:"role-id"`
}

// Delete the role
// (operationId: AdminRealmsRealmRolesByIdRoleIdDelete)
type AdminRealmsRealmRolesByIdRoleIdDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of role
	RoleId string `uri:"role-id"`
}

// Get a specific role's representation
// (operationId: AdminRealmsRealmRolesByIdRoleIdGet)
type AdminRealmsRealmRolesByIdRoleIdGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of role
	RoleId string `uri:"role-id"`
}

// Return object stating whether role Authorization permissions have been initialized or not and a reference
// (operationId: AdminRealmsRealmRolesByIdRoleIdManagementPermissionsGet)
type AdminRealmsRealmRolesByIdRoleIdManagementPermissionsGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	RoleId string `uri:"role-id"`
}

// Return object stating whether role Authorization permissions have been initialized or not and a reference
// (operationId: AdminRealmsRealmRolesByIdRoleIdManagementPermissionsPut)
type AdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	RoleId string `uri:"role-id"`
}

// Update the role
// (operationId: AdminRealmsRealmRolesByIdRoleIdPut)
type AdminRealmsRealmRolesByIdRoleIdPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of role
	RoleId string `uri:"role-id"`
}

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type RolesAPI interface {

	// Get all roles for the realm or client
	// (operationId: AdminRealmsRealmClientsClientUuidRolesGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/roles
	AdminRealmsRealmClientsClientUuidRolesGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesGetParam) ([]RoleRepresentation, error)

	// Create a new role for the realm or client
	// (operationId: AdminRealmsRealmClientsClientUuidRolesPost)
	// POST /admin/realms/{realm}/clients/{client-uuid}/roles
	AdminRealmsRealmClientsClientUuidRolesPost(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesPostParam, req RoleRepresentation) error

	// Get client-level roles for the client that are in the role's composite
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites/clients/{client-uuid}
	AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetParam) ([]RoleRepresentation, error)

	// Remove roles from the role's composite
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete)
	// DELETE /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites
	AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteParam, req AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteReq) error

	// Get composites of the role
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites
	AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetParam) ([]RoleRepresentation, error)

	// Add a composite to the role
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost)
	// POST /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites
	AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostParam, req AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostReq) error

	// Get realm-level roles of the role's composite
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites/realm
	AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetParam) ([]RoleRepresentation, error)

	// Delete a role by name
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameDelete)
	// DELETE /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}
	AdminRealmsRealmClientsClientUuidRolesRoleNameDelete(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameDeleteParam) error

	// Get a role by name
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}
	AdminRealmsRealmClientsClientUuidRolesRoleNameGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameGetParam) (RoleRepresentation, error)

	// Returns a stream of groups that have the specified role name
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/groups
	AdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetParam) ([]GroupRepresentation, error)

	// Return object stating whether role Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/management/permissions
	AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetParam) (ManagementPermissionReference, error)

	// Return object stating whether role Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut)
	// PUT /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/management/permissions
	AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutParam, req ManagementPermissionReference) (ManagementPermissionReference, error)

	// Update a role by name
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNamePut)
	// PUT /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}
	AdminRealmsRealmClientsClientUuidRolesRoleNamePut(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNamePutParam, req RoleRepresentation) error

	// Returns a stream of users that have the specified role name.
	// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameUsersGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/users
	AdminRealmsRealmClientsClientUuidRolesRoleNameUsersGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidRolesRoleNameUsersGetParam) ([]UserRepresentation, error)

	// Get all roles for the realm or client
	// (operationId: AdminRealmsRealmRolesGet)
	// GET /admin/realms/{realm}/roles
	AdminRealmsRealmRolesGet(ctx context.Context, param AdminRealmsRealmRolesGetParam) ([]RoleRepresentation, error)

	// Create a new role for the realm or client
	// (operationId: AdminRealmsRealmRolesPost)
	// POST /admin/realms/{realm}/roles
	AdminRealmsRealmRolesPost(ctx context.Context, param AdminRealmsRealmRolesPostParam, req RoleRepresentation) error

	// Get client-level roles for the client that are in the role's composite
	// (operationId: AdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet)
	// GET /admin/realms/{realm}/roles/{role-name}/composites/clients/{client-uuid}
	AdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet(ctx context.Context, param AdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetParam) ([]RoleRepresentation, error)

	// Remove roles from the role's composite
	// (operationId: AdminRealmsRealmRolesRoleNameCompositesDelete)
	// DELETE /admin/realms/{realm}/roles/{role-name}/composites
	AdminRealmsRealmRolesRoleNameCompositesDelete(ctx context.Context, param AdminRealmsRealmRolesRoleNameCompositesDeleteParam, req AdminRealmsRealmRolesRoleNameCompositesDeleteReq) error

	// Get composites of the role
	// (operationId: AdminRealmsRealmRolesRoleNameCompositesGet)
	// GET /admin/realms/{realm}/roles/{role-name}/composites
	AdminRealmsRealmRolesRoleNameCompositesGet(ctx context.Context, param AdminRealmsRealmRolesRoleNameCompositesGetParam) ([]RoleRepresentation, error)

	// Add a composite to the role
	// (operationId: AdminRealmsRealmRolesRoleNameCompositesPost)
	// POST /admin/realms/{realm}/roles/{role-name}/composites
	AdminRealmsRealmRolesRoleNameCompositesPost(ctx context.Context, param AdminRealmsRealmRolesRoleNameCompositesPostParam, req AdminRealmsRealmRolesRoleNameCompositesPostReq) error

	// Get realm-level roles of the role's composite
	// (operationId: AdminRealmsRealmRolesRoleNameCompositesRealmGet)
	// GET /admin/realms/{realm}/roles/{role-name}/composites/realm
	AdminRealmsRealmRolesRoleNameCompositesRealmGet(ctx context.Context, param AdminRealmsRealmRolesRoleNameCompositesRealmGetParam) ([]RoleRepresentation, error)

	// Delete a role by name
	// (operationId: AdminRealmsRealmRolesRoleNameDelete)
	// DELETE /admin/realms/{realm}/roles/{role-name}
	AdminRealmsRealmRolesRoleNameDelete(ctx context.Context, param AdminRealmsRealmRolesRoleNameDeleteParam) error

	// Get a role by name
	// (operationId: AdminRealmsRealmRolesRoleNameGet)
	// GET /admin/realms/{realm}/roles/{role-name}
	AdminRealmsRealmRolesRoleNameGet(ctx context.Context, param AdminRealmsRealmRolesRoleNameGetParam) (RoleRepresentation, error)

	// Returns a stream of groups that have the specified role name
	// (operationId: AdminRealmsRealmRolesRoleNameGroupsGet)
	// GET /admin/realms/{realm}/roles/{role-name}/groups
	AdminRealmsRealmRolesRoleNameGroupsGet(ctx context.Context, param AdminRealmsRealmRolesRoleNameGroupsGetParam) ([]GroupRepresentation, error)

	// Return object stating whether role Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmRolesRoleNameManagementPermissionsGet)
	// GET /admin/realms/{realm}/roles/{role-name}/management/permissions
	AdminRealmsRealmRolesRoleNameManagementPermissionsGet(ctx context.Context, param AdminRealmsRealmRolesRoleNameManagementPermissionsGetParam) (ManagementPermissionReference, error)

	// Return object stating whether role Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmRolesRoleNameManagementPermissionsPut)
	// PUT /admin/realms/{realm}/roles/{role-name}/management/permissions
	AdminRealmsRealmRolesRoleNameManagementPermissionsPut(ctx context.Context, param AdminRealmsRealmRolesRoleNameManagementPermissionsPutParam, req ManagementPermissionReference) (ManagementPermissionReference, error)

	// Update a role by name
	// (operationId: AdminRealmsRealmRolesRoleNamePut)
	// PUT /admin/realms/{realm}/roles/{role-name}
	AdminRealmsRealmRolesRoleNamePut(ctx context.Context, param AdminRealmsRealmRolesRoleNamePutParam, req RoleRepresentation) error

	// Returns a stream of users that have the specified role name.
	// (operationId: AdminRealmsRealmRolesRoleNameUsersGet)
	// GET /admin/realms/{realm}/roles/{role-name}/users
	AdminRealmsRealmRolesRoleNameUsersGet(ctx context.Context, param AdminRealmsRealmRolesRoleNameUsersGetParam) ([]UserRepresentation, error)
}

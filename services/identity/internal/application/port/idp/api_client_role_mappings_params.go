// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

// Get available client-level roles that can be mapped to the user or group
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet)
type AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
	// client id (not clientId!)
	ClientId string `uri:"client-id"`
}

// Get effective client-level role mappings This recurses any composite roles
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet)
type AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
	// client id (not clientId!)
	ClientId string `uri:"client-id"`
	// if false, return roles with their attributes
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Delete client-level roles from user or group role mapping
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete)
type AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
	// client id (not clientId!)
	ClientId string `uri:"client-id"`
}

// Get client-level role mappings for the user or group, and the app
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet)
type AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
	// client id (not clientId!)
	ClientId string `uri:"client-id"`
}

// Add client-level roles to the user or group role mapping
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost)
type AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
	// client id (not clientId!)
	ClientId string `uri:"client-id"`
}

// Get available client-level roles that can be mapped to the user or group
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet)
type AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// client id (not clientId!)
	ClientId string `uri:"client-id"`
}

// Get effective client-level role mappings This recurses any composite roles
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet)
type AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// client id (not clientId!)
	ClientId string `uri:"client-id"`
	// if false, return roles with their attributes
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Delete client-level roles from user or group role mapping
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete)
type AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// client id (not clientId!)
	ClientId string `uri:"client-id"`
}

// Get client-level role mappings for the user or group, and the app
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet)
type AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// client id (not clientId!)
	ClientId string `uri:"client-id"`
}

// Add client-level roles to the user or group role mapping
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost)
type AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// client id (not clientId!)
	ClientId string `uri:"client-id"`
}

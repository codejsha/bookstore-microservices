// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type UsersAPI interface {

	// Returns the number of users that match the given criteria.
	// It can be called in three different ways. 1. Donâ€™t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. <p> 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. <p> 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and. (operationId: AdminRealmsRealmUsersCountGet)
	// GET /admin/realms/{realm}/users/count
	AdminRealmsRealmUsersCountGet(ctx context.Context, param AdminRealmsRealmUsersCountGetParam) (int32, error)

	// Get users Returns a stream of users, filtered according to query parameters.
	// (operationId: AdminRealmsRealmUsersGet)
	// GET /admin/realms/{realm}/users
	AdminRealmsRealmUsersGet(ctx context.Context, param AdminRealmsRealmUsersGetParam) ([]UserRepresentation, error)

	// Create a new user Username must be unique.
	// (operationId: AdminRealmsRealmUsersPost)
	// POST /admin/realms/{realm}/users
	AdminRealmsRealmUsersPost(ctx context.Context, param AdminRealmsRealmUsersPostParam, req UserRepresentation) error

	// Get the configuration for the user profile (operationId: AdminRealmsRealmUsersProfileGet)
	// GET /admin/realms/{realm}/users/profile
	AdminRealmsRealmUsersProfileGet(ctx context.Context, param AdminRealmsRealmUsersProfileGetParam) (UPConfig, error)

	// Get the UserProfileMetadata from the configuration (operationId: AdminRealmsRealmUsersProfileMetadataGet)
	// GET /admin/realms/{realm}/users/profile/metadata
	AdminRealmsRealmUsersProfileMetadataGet(ctx context.Context, param AdminRealmsRealmUsersProfileMetadataGetParam) (UserProfileMetadata, error)

	// Set the configuration for the user profile (operationId: AdminRealmsRealmUsersProfilePut)
	// PUT /admin/realms/{realm}/users/profile
	AdminRealmsRealmUsersProfilePut(ctx context.Context, param AdminRealmsRealmUsersProfilePutParam, req UPConfig) (UPConfig, error)

	// Return credential types, which are provided by the user storage where user is stored.
	// Returned values can contain for example "password", "otp" etc. This will always return empty list for "local" users, which are not backed by any user storage (operationId: AdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet)
	// GET /admin/realms/{realm}/users/{user-id}/configured-user-storage-credential-types
	AdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet(ctx context.Context, param AdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetParam) ([]string, error)

	// Revoke consent and offline tokens for particular client from user
	// (operationId: AdminRealmsRealmUsersUserIdConsentsClientDelete)
	// DELETE /admin/realms/{realm}/users/{user-id}/consents/{client}
	AdminRealmsRealmUsersUserIdConsentsClientDelete(ctx context.Context, param AdminRealmsRealmUsersUserIdConsentsClientDeleteParam) error

	// Get consents granted by the user
	// (operationId: AdminRealmsRealmUsersUserIdConsentsGet)
	// GET /admin/realms/{realm}/users/{user-id}/consents
	AdminRealmsRealmUsersUserIdConsentsGet(ctx context.Context, param AdminRealmsRealmUsersUserIdConsentsGetParam) ([]map[string]interface{}, error)

	// Remove a credential for a user
	// (operationId: AdminRealmsRealmUsersUserIdCredentialsCredentialIdDelete)
	// DELETE /admin/realms/{realm}/users/{user-id}/credentials/{credentialId}
	AdminRealmsRealmUsersUserIdCredentialsCredentialIdDelete(ctx context.Context, param AdminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteParam) error

	// Move a credential to a position behind another credential
	// (operationId: AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost)
	// POST /admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}
	AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost(ctx context.Context, param AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostParam) error

	// Move a credential to a first position in the credentials list of the user
	// (operationId: AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost)
	// POST /admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/moveToFirst
	AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost(ctx context.Context, param AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostParam) error

	// Update a credential label for a user
	// (operationId: AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut)
	// PUT /admin/realms/{realm}/users/{user-id}/credentials/{credentialId}/userLabel
	AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut(ctx context.Context, param AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutParam, req AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutReq) error

	// (operationId: AdminRealmsRealmUsersUserIdCredentialsGet)
	// GET /admin/realms/{realm}/users/{user-id}/credentials
	AdminRealmsRealmUsersUserIdCredentialsGet(ctx context.Context, param AdminRealmsRealmUsersUserIdCredentialsGetParam) ([]CredentialRepresentation, error)

	// Delete the user
	// (operationId: AdminRealmsRealmUsersUserIdDelete)
	// DELETE /admin/realms/{realm}/users/{user-id}
	AdminRealmsRealmUsersUserIdDelete(ctx context.Context, param AdminRealmsRealmUsersUserIdDeleteParam) error

	// Disable all credentials for a user of a specific type
	// (operationId: AdminRealmsRealmUsersUserIdDisableCredentialTypesPut)
	// PUT /admin/realms/{realm}/users/{user-id}/disable-credential-types
	AdminRealmsRealmUsersUserIdDisableCredentialTypesPut(ctx context.Context, param AdminRealmsRealmUsersUserIdDisableCredentialTypesPutParam, req AdminRealmsRealmUsersUserIdDisableCredentialTypesPutReq) error

	// Send an email to the user with a link they can click to execute particular actions.
	// An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId. (operationId: AdminRealmsRealmUsersUserIdExecuteActionsEmailPut)
	// PUT /admin/realms/{realm}/users/{user-id}/execute-actions-email
	AdminRealmsRealmUsersUserIdExecuteActionsEmailPut(ctx context.Context, param AdminRealmsRealmUsersUserIdExecuteActionsEmailPutParam, req AdminRealmsRealmUsersUserIdExecuteActionsEmailPutReq) error

	// Get social logins associated with the user
	// (operationId: AdminRealmsRealmUsersUserIdFederatedIdentityGet)
	// GET /admin/realms/{realm}/users/{user-id}/federated-identity
	AdminRealmsRealmUsersUserIdFederatedIdentityGet(ctx context.Context, param AdminRealmsRealmUsersUserIdFederatedIdentityGetParam) ([]FederatedIdentityRepresentation, error)

	// Remove a social login provider from user
	// (operationId: AdminRealmsRealmUsersUserIdFederatedIdentityProviderDelete)
	// DELETE /admin/realms/{realm}/users/{user-id}/federated-identity/{provider}
	AdminRealmsRealmUsersUserIdFederatedIdentityProviderDelete(ctx context.Context, param AdminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteParam) error

	// Add a social login provider to the user
	// (operationId: AdminRealmsRealmUsersUserIdFederatedIdentityProviderPost)
	// POST /admin/realms/{realm}/users/{user-id}/federated-identity/{provider}
	AdminRealmsRealmUsersUserIdFederatedIdentityProviderPost(ctx context.Context, param AdminRealmsRealmUsersUserIdFederatedIdentityProviderPostParam) error

	// Get representation of the user
	// (operationId: AdminRealmsRealmUsersUserIdGet)
	// GET /admin/realms/{realm}/users/{user-id}
	AdminRealmsRealmUsersUserIdGet(ctx context.Context, param AdminRealmsRealmUsersUserIdGetParam) (UserRepresentation, error)

	// (operationId: AdminRealmsRealmUsersUserIdGroupsCountGet)
	// GET /admin/realms/{realm}/users/{user-id}/groups/count
	AdminRealmsRealmUsersUserIdGroupsCountGet(ctx context.Context, param AdminRealmsRealmUsersUserIdGroupsCountGetParam) (map[string]int64, error)

	// (operationId: AdminRealmsRealmUsersUserIdGroupsGet)
	// GET /admin/realms/{realm}/users/{user-id}/groups
	AdminRealmsRealmUsersUserIdGroupsGet(ctx context.Context, param AdminRealmsRealmUsersUserIdGroupsGetParam) ([]GroupRepresentation, error)

	// (operationId: AdminRealmsRealmUsersUserIdGroupsGroupIdDelete)
	// DELETE /admin/realms/{realm}/users/{user-id}/groups/{groupId}
	AdminRealmsRealmUsersUserIdGroupsGroupIdDelete(ctx context.Context, param AdminRealmsRealmUsersUserIdGroupsGroupIdDeleteParam) error

	// (operationId: AdminRealmsRealmUsersUserIdGroupsGroupIdPut)
	// PUT /admin/realms/{realm}/users/{user-id}/groups/{groupId}
	AdminRealmsRealmUsersUserIdGroupsGroupIdPut(ctx context.Context, param AdminRealmsRealmUsersUserIdGroupsGroupIdPutParam) error

	// Impersonate the user
	// (operationId: AdminRealmsRealmUsersUserIdImpersonationPost)
	// POST /admin/realms/{realm}/users/{user-id}/impersonation
	AdminRealmsRealmUsersUserIdImpersonationPost(ctx context.Context, param AdminRealmsRealmUsersUserIdImpersonationPostParam) (map[string]interface{}, error)

	// Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
	// (operationId: AdminRealmsRealmUsersUserIdLogoutPost)
	// POST /admin/realms/{realm}/users/{user-id}/logout
	AdminRealmsRealmUsersUserIdLogoutPost(ctx context.Context, param AdminRealmsRealmUsersUserIdLogoutPostParam) error

	// Get offline sessions associated with the user and client
	// (operationId: AdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet)
	// GET /admin/realms/{realm}/users/{user-id}/offline-sessions/{clientUuid}
	AdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet(ctx context.Context, param AdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetParam) ([]UserSessionRepresentation, error)

	// Update the user
	// (operationId: AdminRealmsRealmUsersUserIdPut)
	// PUT /admin/realms/{realm}/users/{user-id}
	AdminRealmsRealmUsersUserIdPut(ctx context.Context, param AdminRealmsRealmUsersUserIdPutParam, req UserRepresentation) error

	// Send an email to the user with a link they can click to reset their password.
	// The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it. (operationId: AdminRealmsRealmUsersUserIdResetPasswordEmailPut)
	// PUT /admin/realms/{realm}/users/{user-id}/reset-password-email
	// Deprecated
	AdminRealmsRealmUsersUserIdResetPasswordEmailPut(ctx context.Context, param AdminRealmsRealmUsersUserIdResetPasswordEmailPutParam) error

	// Set up a new password for the user.
	// (operationId: AdminRealmsRealmUsersUserIdResetPasswordPut)
	// PUT /admin/realms/{realm}/users/{user-id}/reset-password
	AdminRealmsRealmUsersUserIdResetPasswordPut(ctx context.Context, param AdminRealmsRealmUsersUserIdResetPasswordPutParam, req CredentialRepresentation) error

	// Send an email-verification email to the user An email contains a link the user can click to verify their email address.
	// The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours (operationId: AdminRealmsRealmUsersUserIdSendVerifyEmailPut)
	// PUT /admin/realms/{realm}/users/{user-id}/send-verify-email
	AdminRealmsRealmUsersUserIdSendVerifyEmailPut(ctx context.Context, param AdminRealmsRealmUsersUserIdSendVerifyEmailPutParam) error

	// Get sessions associated with the user
	// (operationId: AdminRealmsRealmUsersUserIdSessionsGet)
	// GET /admin/realms/{realm}/users/{user-id}/sessions
	AdminRealmsRealmUsersUserIdSessionsGet(ctx context.Context, param AdminRealmsRealmUsersUserIdSessionsGetParam) ([]UserSessionRepresentation, error)

	// (operationId: AdminRealmsRealmUsersUserIdUnmanagedAttributesGet)
	// GET /admin/realms/{realm}/users/{user-id}/unmanagedAttributes
	AdminRealmsRealmUsersUserIdUnmanagedAttributesGet(ctx context.Context, param AdminRealmsRealmUsersUserIdUnmanagedAttributesGetParam) (map[string][]string, error)
}

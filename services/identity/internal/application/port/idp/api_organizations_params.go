// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

// Returns a paginated list of organizations filtered according to the specified parameters
// (operationId: AdminRealmsRealmOrganizationsGet)
type AdminRealmsRealmOrganizationsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// if true, return the full representation. Otherwise, only the basic fields are returned.
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
	// Boolean which defines whether the param 'search' must match exactly or not
	Exact bool `form:"exact,omitempty"`
	// The position of the first result to be processed (pagination offset)
	First int32 `form:"first,omitempty"`
	// The maximum number of results to be returned - defaults to 10
	Max int32 `form:"max,omitempty"`
	// A query to search for custom attributes, in the format 'key1:value2 key2:value2'
	Q string `form:"q,omitempty"`
	// A String representing either an organization name or domain
	Search string `form:"search,omitempty"`
}

// Returns the organizations associated with the user that has the specified id
// (operationId: AdminRealmsRealmOrganizationsMembersMemberIdOrganizationsGet)
type AdminRealmsRealmOrganizationsMembersMemberIdOrganizationsGetParam struct {
	// realm name (not id!)
	Realm    string `uri:"realm"`
	MemberId string `uri:"member-id"`
}

// Deletes the organization
// (operationId: AdminRealmsRealmOrganizationsOrgIdDelete)
type AdminRealmsRealmOrganizationsOrgIdDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
}

// Returns the organization representation
// (operationId: AdminRealmsRealmOrganizationsOrgIdGet)
type AdminRealmsRealmOrganizationsOrgIdGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
}

// Removes the identity provider with the specified alias from the organization
// Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned (operationId: AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDelete)
type AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
	Alias string `uri:"alias"`
}

// Returns the identity provider associated with the organization that has the specified alias
// Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned (operationId: AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGet)
type AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
	Alias string `uri:"alias"`
}

// Returns all identity providers associated with the organization
// (operationId: AdminRealmsRealmOrganizationsOrgIdIdentityProvidersGet)
type AdminRealmsRealmOrganizationsOrgIdIdentityProvidersGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
}

// Adds the identity provider with the specified id to the organization
// Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned (operationId: AdminRealmsRealmOrganizationsOrgIdIdentityProvidersPost)
type AdminRealmsRealmOrganizationsOrgIdIdentityProvidersPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
}

// Returns number of members in the organization.
// (operationId: AdminRealmsRealmOrganizationsOrgIdMembersCountGet)
type AdminRealmsRealmOrganizationsOrgIdMembersCountGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
}

// Returns a paginated list of organization members filtered according to the specified parameters
// (operationId: AdminRealmsRealmOrganizationsOrgIdMembersGet)
type AdminRealmsRealmOrganizationsOrgIdMembersGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
	// Boolean which defines whether the param 'search' must match exactly or not
	Exact bool `form:"exact,omitempty"`
	// The position of the first result to be processed (pagination offset)
	First int32 `form:"first,omitempty"`
	// The maximum number of results to be returned. Defaults to 10
	Max int32 `form:"max,omitempty"`
	// The membership type
	MembershipType string `form:"membershipType,omitempty"`
	// A String representing either a member's username, e-mail, first name, or last name.
	Search string `form:"search,omitempty"`
}

// Invites an existing user to the organization, using the specified user id
// (operationId: AdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPost)
type AdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
	Id    string `form:"id,omitempty"`
}

// Invites an existing user or sends a registration link to a new user, based on the provided e-mail address.
// If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link. (operationId: AdminRealmsRealmOrganizationsOrgIdMembersInviteUserPost)
type AdminRealmsRealmOrganizationsOrgIdMembersInviteUserPostParam struct {
	// realm name (not id!)
	Realm     string `uri:"realm"`
	OrgId     string `uri:"org-id"`
	Email     string `form:"email,omitempty"`
	FirstName string `form:"firstName,omitempty"`
	LastName  string `form:"lastName,omitempty"`
}

// Removes the user with the specified id from the organization
// Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned (operationId: AdminRealmsRealmOrganizationsOrgIdMembersMemberIdDelete)
type AdminRealmsRealmOrganizationsOrgIdMembersMemberIdDeleteParam struct {
	// realm name (not id!)
	Realm    string `uri:"realm"`
	OrgId    string `uri:"org-id"`
	MemberId string `uri:"member-id"`
}

// Returns the member of the organization with the specified id
// Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned (operationId: AdminRealmsRealmOrganizationsOrgIdMembersMemberIdGet)
type AdminRealmsRealmOrganizationsOrgIdMembersMemberIdGetParam struct {
	// realm name (not id!)
	Realm    string `uri:"realm"`
	OrgId    string `uri:"org-id"`
	MemberId string `uri:"member-id"`
}

// Returns the organizations associated with the user that has the specified id
// (operationId: AdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGet)
type AdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGetParam struct {
	// realm name (not id!)
	Realm    string `uri:"realm"`
	OrgId    string `uri:"org-id"`
	MemberId string `uri:"member-id"`
}

// Adds the user with the specified id as a member of the organization
// Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned (operationId: AdminRealmsRealmOrganizationsOrgIdMembersPost)
type AdminRealmsRealmOrganizationsOrgIdMembersPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
}

// Updates the organization
// (operationId: AdminRealmsRealmOrganizationsOrgIdPut)
type AdminRealmsRealmOrganizationsOrgIdPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	OrgId string `uri:"org-id"`
}

// Creates a new organization
// (operationId: AdminRealmsRealmOrganizationsPost)
type AdminRealmsRealmOrganizationsPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

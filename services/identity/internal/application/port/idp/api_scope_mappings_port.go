// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type ScopeMappingsAPI interface {

	// The available client-level roles Returns the roles for the client that can be associated with the client's scope
	// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet)
	// GET /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}/available
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetParam) ([]RoleRepresentation, error)

	// Get effective client roles Returns the roles for the client that are associated with the client's scope.
	// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet)
	// GET /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}/composite
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetParam) ([]RoleRepresentation, error)

	// Remove client-level roles from the client's scope.
	// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete)
	// DELETE /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteParam, req AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteReq) error

	// Get the roles associated with a client's scope Returns roles for the client.
	// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet)
	// GET /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetParam) ([]RoleRepresentation, error)

	// Add client-level roles to the client's scope
	// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost)
	// POST /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostParam, req AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostReq) error

	// Get all scope mappings for the client
	// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsGet)
	// GET /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings
	// Deprecated
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsGet(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsGetParam) (MappingsRepresentation, error)

	// Get realm-level roles that are available to attach to this client's scope
	// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet)
	// GET /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm/available
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetParam) ([]RoleRepresentation, error)

	// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
	// The method is really to show a comprehensive total view of realm-level roles associated with the client. (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet)
	// GET /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm/composite
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetParam) ([]RoleRepresentation, error)

	// Remove a set of realm-level roles from the client's scope
	// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete)
	// DELETE /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteParam, req AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteReq) error

	// Get realm-level roles associated with the client's scope
	// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet)
	// GET /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetParam) ([]RoleRepresentation, error)

	// Add a set of realm-level roles to the client's scope
	// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost)
	// POST /admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm
	AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost(ctx context.Context, param AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostParam, req AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostReq) error

	// The available client-level roles Returns the roles for the client that can be associated with the client's scope
	// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet)
	// GET /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}/available
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetParam) ([]RoleRepresentation, error)

	// Get effective client roles Returns the roles for the client that are associated with the client's scope.
	// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet)
	// GET /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}/composite
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetParam) ([]RoleRepresentation, error)

	// Remove client-level roles from the client's scope.
	// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete)
	// DELETE /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteParam, req AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteReq) error

	// Get the roles associated with a client's scope Returns roles for the client.
	// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet)
	// GET /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetParam) ([]RoleRepresentation, error)

	// Add client-level roles to the client's scope
	// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost)
	// POST /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostParam, req AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostReq) error

	// Get all scope mappings for the client
	// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet)
	// GET /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings
	// Deprecated
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetParam) (MappingsRepresentation, error)

	// Get realm-level roles that are available to attach to this client's scope
	// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet)
	// GET /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm/available
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetParam) ([]RoleRepresentation, error)

	// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
	// The method is really to show a comprehensive total view of realm-level roles associated with the client. (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet)
	// GET /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm/composite
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetParam) ([]RoleRepresentation, error)

	// Remove a set of realm-level roles from the client's scope
	// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete)
	// DELETE /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteParam, req AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteReq) error

	// Get realm-level roles associated with the client's scope
	// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet)
	// GET /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetParam) ([]RoleRepresentation, error)

	// Add a set of realm-level roles to the client's scope
	// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost)
	// POST /admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm
	AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost(ctx context.Context, param AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostParam, req AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostReq) error

	// The available client-level roles Returns the roles for the client that can be associated with the client's scope
	// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}/available
	AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetParam) ([]RoleRepresentation, error)

	// Get effective client roles Returns the roles for the client that are associated with the client's scope.
	// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}/composite
	AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetParam) ([]RoleRepresentation, error)

	// Remove client-level roles from the client's scope.
	// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete)
	// DELETE /admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}
	AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteParam, req AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteReq) error

	// Get the roles associated with a client's scope Returns roles for the client.
	// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}
	AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetParam) ([]RoleRepresentation, error)

	// Add client-level roles to the client's scope
	// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost)
	// POST /admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}
	AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostParam, req AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostReq) error

	// Get all scope mappings for the client
	// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/scope-mappings
	// Deprecated
	AdminRealmsRealmClientsClientUuidScopeMappingsGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsGetParam) (MappingsRepresentation, error)

	// Get realm-level roles that are available to attach to this client's scope
	// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm/available
	AdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetParam) ([]RoleRepresentation, error)

	// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
	// The method is really to show a comprehensive total view of realm-level roles associated with the client. (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm/composite
	AdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetParam) ([]RoleRepresentation, error)

	// Remove a set of realm-level roles from the client's scope
	// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsRealmDelete)
	// DELETE /admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm
	AdminRealmsRealmClientsClientUuidScopeMappingsRealmDelete(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteParam, req AdminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteReq) error

	// Get realm-level roles associated with the client's scope
	// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsRealmGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm
	AdminRealmsRealmClientsClientUuidScopeMappingsRealmGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsRealmGetParam) ([]RoleRepresentation, error)

	// Add a set of realm-level roles to the client's scope
	// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsRealmPost)
	// POST /admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm
	AdminRealmsRealmClientsClientUuidScopeMappingsRealmPost(ctx context.Context, param AdminRealmsRealmClientsClientUuidScopeMappingsRealmPostParam, req AdminRealmsRealmClientsClientUuidScopeMappingsRealmPostReq) error
}

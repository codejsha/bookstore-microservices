// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak OpenID Connect API
//
// Keycloak OpenID Connect API of Bookstore microservices
//
// API version: 0.1.0
// Contact: admin@example.com

package idp

import (
	"encoding/json"
	"fmt"
)

// GrantType the model 'GrantType'
type GrantType string

// List of GrantType
const (
	GRANTTYPE_PASSWORD      GrantType = "password"
	GRANTTYPE_REFRESH_TOKEN GrantType = "refresh_token"
)

// All allowed values of GrantType enum
var AllowedGrantTypeEnumValues = []GrantType{
	"password",
	"refresh_token",
}

func (v *GrantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GrantType(value)
	for _, existing := range AllowedGrantTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GrantType", value)
}

// NewGrantTypeFromValue returns a pointer to a valid GrantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGrantTypeFromValue(v string) (*GrantType, error) {
	ev := GrantType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GrantType: valid values are %v", v, AllowedGrantTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GrantType) IsValid() bool {
	for _, existing := range AllowedGrantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GrantType value
func (v GrantType) Ptr() *GrantType {
	return &v
}

type NullableGrantType struct {
	value *GrantType
	isSet bool
}

func (v NullableGrantType) Get() *GrantType {
	return v.value
}

func (v *NullableGrantType) Set(val *GrantType) {
	v.value = val
	v.isSet = true
}

func (v NullableGrantType) IsSet() bool {
	return v.isSet
}

func (v *NullableGrantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrantType(val *GrantType) *NullableGrantType {
	return &NullableGrantType{value: val, isSet: true}
}

func (v NullableGrantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

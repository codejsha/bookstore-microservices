// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

// The available client-level roles Returns the roles for the client that can be associated with the client's scope
// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	Client        string `uri:"client"`
}

// Get effective client roles Returns the roles for the client that are associated with the client's scope.
// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	Client        string `uri:"client"`
	// if false, return roles with their attributes
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Remove client-level roles from the client's scope.
// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	Client        string `uri:"client"`
}

// Get the roles associated with a client's scope Returns roles for the client.
// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	Client        string `uri:"client"`
}

// Add client-level roles to the client's scope
// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	Client        string `uri:"client"`
}

// Get all scope mappings for the client
// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsGet)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
}

// Get realm-level roles that are available to attach to this client's scope
// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
}

// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
// The method is really to show a comprehensive total view of realm-level roles associated with the client. (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	// if false, return roles with their attributes
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Remove a set of realm-level roles from the client's scope
// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
}

// Get realm-level roles associated with the client's scope
// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
}

// Add a set of realm-level roles to the client's scope
// (operationId: AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost)
type AdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
}

// The available client-level roles Returns the roles for the client that can be associated with the client's scope
// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	Client        string `uri:"client"`
}

// Get effective client roles Returns the roles for the client that are associated with the client's scope.
// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	Client        string `uri:"client"`
	// if false, return roles with their attributes
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Remove client-level roles from the client's scope.
// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	Client        string `uri:"client"`
}

// Get the roles associated with a client's scope Returns roles for the client.
// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	Client        string `uri:"client"`
}

// Add client-level roles to the client's scope
// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	Client        string `uri:"client"`
}

// Get all scope mappings for the client
// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
}

// Get realm-level roles that are available to attach to this client's scope
// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
}

// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
// The method is really to show a comprehensive total view of realm-level roles associated with the client. (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
	// if false, return roles with their attributes
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Remove a set of realm-level roles from the client's scope
// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
}

// Get realm-level roles associated with the client's scope
// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
}

// Add a set of realm-level roles to the client's scope
// (operationId: AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost)
type AdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"client-scope-id"`
}

// The available client-level roles Returns the roles for the client that can be associated with the client's scope
// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet)
type AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	Client     string `uri:"client"`
}

// Get effective client roles Returns the roles for the client that are associated with the client's scope.
// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet)
type AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	Client     string `uri:"client"`
	// if false, return roles with their attributes
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Remove client-level roles from the client's scope.
// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete)
type AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	Client     string `uri:"client"`
}

// Get the roles associated with a client's scope Returns roles for the client.
// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet)
type AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	Client     string `uri:"client"`
}

// Add client-level roles to the client's scope
// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost)
type AdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	Client     string `uri:"client"`
}

// Get all scope mappings for the client
// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsGet)
type AdminRealmsRealmClientsClientUuidScopeMappingsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
}

// Get realm-level roles that are available to attach to this client's scope
// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet)
type AdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
}

// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
// The method is really to show a comprehensive total view of realm-level roles associated with the client. (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet)
type AdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	// if false, return roles with their attributes
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Remove a set of realm-level roles from the client's scope
// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsRealmDelete)
type AdminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
}

// Get realm-level roles associated with the client's scope
// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsRealmGet)
type AdminRealmsRealmClientsClientUuidScopeMappingsRealmGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
}

// Add a set of realm-level roles to the client's scope
// (operationId: AdminRealmsRealmClientsClientUuidScopeMappingsRealmPost)
type AdminRealmsRealmClientsClientUuidScopeMappingsRealmPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
}

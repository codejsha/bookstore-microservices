// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type ClientRoleMappingsAPI interface {

	// Get available client-level roles that can be mapped to the user or group
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet)
	// GET /admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}/available
	AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetParam) ([]RoleRepresentation, error)

	// Get effective client-level role mappings This recurses any composite roles
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet)
	// GET /admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}/composite
	AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetParam) ([]RoleRepresentation, error)

	// Delete client-level roles from user or group role mapping
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete)
	// DELETE /admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}
	AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteParam, req AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteReq) error

	// Get client-level role mappings for the user or group, and the app
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet)
	// GET /admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}
	AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetParam) ([]RoleRepresentation, error)

	// Add client-level roles to the user or group role mapping
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost)
	// POST /admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}
	AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostParam, req AdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostReq) error

	// Get available client-level roles that can be mapped to the user or group
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet)
	// GET /admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}/available
	AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetParam) ([]RoleRepresentation, error)

	// Get effective client-level role mappings This recurses any composite roles
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet)
	// GET /admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}/composite
	AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetParam) ([]RoleRepresentation, error)

	// Delete client-level roles from user or group role mapping
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete)
	// DELETE /admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}
	AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteParam, req AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteReq) error

	// Get client-level role mappings for the user or group, and the app
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet)
	// GET /admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}
	AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetParam) ([]RoleRepresentation, error)

	// Add client-level roles to the user or group role mapping
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost)
	// POST /admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}
	AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostParam, req AdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostReq) error
}

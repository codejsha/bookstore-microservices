// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

// Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
// (operationId: AdminRealmsGet)
type AdminRealmsGetParam struct {
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Delete all admin events
// (operationId: AdminRealmsRealmAdminEventsDelete)
type AdminRealmsRealmAdminEventsDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Get admin events Returns all admin events, or filters events based on URL query parameters listed here
// (operationId: AdminRealmsRealmAdminEventsGet)
type AdminRealmsRealmAdminEventsGetParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	AuthClient    string `form:"authClient,omitempty"`
	AuthIpAddress string `form:"authIpAddress,omitempty"`
	AuthRealm     string `form:"authRealm,omitempty"`
	// user id
	AuthUser string `form:"authUser,omitempty"`
	DateFrom string `form:"dateFrom,omitempty"`
	DateTo   string `form:"dateTo,omitempty"`
	First    int32  `form:"first,omitempty"`
	// Maximum results size (defaults to 100)
	Max            int32    `form:"max,omitempty"`
	OperationTypes []string `form:"operationTypes,omitempty"`
	ResourcePath   string   `form:"resourcePath,omitempty"`
	ResourceTypes  []string `form:"resourceTypes,omitempty"`
}

// Base path for importing clients under this realm.
// (operationId: AdminRealmsRealmClientDescriptionConverterPost)
type AdminRealmsRealmClientDescriptionConverterPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// (operationId: AdminRealmsRealmClientPoliciesPoliciesGet)
type AdminRealmsRealmClientPoliciesPoliciesGetParam struct {
	// realm name (not id!)
	Realm                 string `uri:"realm"`
	IncludeGlobalPolicies bool   `form:"include-global-policies,omitempty"`
}

// (operationId: AdminRealmsRealmClientPoliciesPoliciesPut)
type AdminRealmsRealmClientPoliciesPoliciesPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// (operationId: AdminRealmsRealmClientPoliciesProfilesGet)
type AdminRealmsRealmClientPoliciesProfilesGetParam struct {
	// realm name (not id!)
	Realm                 string `uri:"realm"`
	IncludeGlobalProfiles bool   `form:"include-global-profiles,omitempty"`
}

// (operationId: AdminRealmsRealmClientPoliciesProfilesPut)
type AdminRealmsRealmClientPoliciesProfilesPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Get client session stats Returns a JSON map.
// The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map. (operationId: AdminRealmsRealmClientSessionStatsGet)
type AdminRealmsRealmClientSessionStatsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// List all client types available in the current realm
// This endpoint returns a list of both global and realm level client types and the attributes they set (operationId: AdminRealmsRealmClientTypesGet)
type AdminRealmsRealmClientTypesGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Update a client type
// This endpoint allows you to update a realm level client type (operationId: AdminRealmsRealmClientTypesPut)
type AdminRealmsRealmClientTypesPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// (operationId: AdminRealmsRealmCredentialRegistratorsGet)
type AdminRealmsRealmCredentialRegistratorsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// (operationId: AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdDelete)
type AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdDeleteParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"clientScopeId"`
}

// (operationId: AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPut)
type AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPutParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"clientScopeId"`
}

// Get realm default client scopes.  Only name and ids are returned.
// (operationId: AdminRealmsRealmDefaultDefaultClientScopesGet)
type AdminRealmsRealmDefaultDefaultClientScopesGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Get group hierarchy.  Only name and ids are returned.
// (operationId: AdminRealmsRealmDefaultGroupsGet)
type AdminRealmsRealmDefaultGroupsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// (operationId: AdminRealmsRealmDefaultGroupsGroupIdDelete)
type AdminRealmsRealmDefaultGroupsGroupIdDeleteParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"groupId"`
}

// (operationId: AdminRealmsRealmDefaultGroupsGroupIdPut)
type AdminRealmsRealmDefaultGroupsGroupIdPutParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"groupId"`
}

// (operationId: AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdDelete)
type AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdDeleteParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"clientScopeId"`
}

// (operationId: AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPut)
type AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPutParam struct {
	// realm name (not id!)
	Realm         string `uri:"realm"`
	ClientScopeId string `uri:"clientScopeId"`
}

// Get realm optional client scopes.  Only name and ids are returned.
// (operationId: AdminRealmsRealmDefaultOptionalClientScopesGet)
type AdminRealmsRealmDefaultOptionalClientScopesGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Delete the realm
// (operationId: AdminRealmsRealmDelete)
type AdminRealmsRealmDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Get the events provider configuration Returns JSON object with events provider configuration
// (operationId: AdminRealmsRealmEventsConfigGet)
type AdminRealmsRealmEventsConfigGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Update the events provider Change the events provider and/or its configuration (operationId: AdminRealmsRealmEventsConfigPut)
type AdminRealmsRealmEventsConfigPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Delete all events
// (operationId: AdminRealmsRealmEventsDelete)
type AdminRealmsRealmEventsDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Get events Returns all events, or filters them based on URL query parameters listed here
// (operationId: AdminRealmsRealmEventsGet)
type AdminRealmsRealmEventsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// App or oauth client name
	Client string `form:"client,omitempty"`
	// From date
	DateFrom string `form:"dateFrom,omitempty"`
	// To date
	DateTo string `form:"dateTo,omitempty"`
	// Paging offset
	First int32 `form:"first,omitempty"`
	// IP Address
	IpAddress string `form:"ipAddress,omitempty"`
	// Maximum results size (defaults to 100)
	Max int32 `form:"max,omitempty"`
	// The types of events to return
	Type_ []string `form:"type,omitempty"`
	// User id
	User string `form:"user,omitempty"`
}

// Get the top-level representation of the realm It will not include nested information like User and Client representations.
// (operationId: AdminRealmsRealmGet)
type AdminRealmsRealmGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// (operationId: AdminRealmsRealmGroupByPathPathGet)
type AdminRealmsRealmGroupByPathPathGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Path  string `uri:"path"`
}

// (operationId: AdminRealmsRealmLocalizationGet)
type AdminRealmsRealmLocalizationGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// (operationId: AdminRealmsRealmLocalizationLocaleDelete)
type AdminRealmsRealmLocalizationLocaleDeleteParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	Locale string `uri:"locale"`
}

// (operationId: AdminRealmsRealmLocalizationLocaleGet)
type AdminRealmsRealmLocalizationLocaleGetParam struct {
	// realm name (not id!)
	Realm                         string `uri:"realm"`
	Locale                        string `uri:"locale"`
	UseRealmDefaultLocaleFallback bool   `form:"useRealmDefaultLocaleFallback,omitempty"`
}

// (operationId: AdminRealmsRealmLocalizationLocaleKeyDelete)
type AdminRealmsRealmLocalizationLocaleKeyDeleteParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	Key    string `uri:"key"`
	Locale string `uri:"locale"`
}

// (operationId: AdminRealmsRealmLocalizationLocaleKeyGet)
type AdminRealmsRealmLocalizationLocaleKeyGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	Key    string `uri:"key"`
	Locale string `uri:"locale"`
}

// (operationId: AdminRealmsRealmLocalizationLocaleKeyPut)
type AdminRealmsRealmLocalizationLocaleKeyPutParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	Key    string `uri:"key"`
	Locale string `uri:"locale"`
}

// Import localization from uploaded JSON file
// (operationId: AdminRealmsRealmLocalizationLocalePost)
type AdminRealmsRealmLocalizationLocalePostParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	Locale string `uri:"locale"`
}

// Removes all user sessions.
// Any client that has an admin url will also be told to invalidate any sessions they have. (operationId: AdminRealmsRealmLogoutAllPost)
type AdminRealmsRealmLogoutAllPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Partial export of existing realm into a JSON file.
// (operationId: AdminRealmsRealmPartialExportPost)
type AdminRealmsRealmPartialExportPostParam struct {
	// realm name (not id!)
	Realm                string `uri:"realm"`
	ExportClients        bool   `form:"exportClients,omitempty"`
	ExportGroupsAndRoles bool   `form:"exportGroupsAndRoles,omitempty"`
}

// Partial import from a JSON file to an existing realm.
// (operationId: AdminRealmsRealmPartialImportPost)
type AdminRealmsRealmPartialImportPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Push the realm's revocation policy to any client that has an admin url associated with it.
// (operationId: AdminRealmsRealmPushRevocationPost)
type AdminRealmsRealmPushRevocationPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
// This will only update top-level attributes of the realm. (operationId: AdminRealmsRealmPut)
type AdminRealmsRealmPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Remove a specific user session.
// Any client that has an admin url will also be told to invalidate this particular session. (operationId: AdminRealmsRealmSessionsSessionDelete)
type AdminRealmsRealmSessionsSessionDeleteParam struct {
	// realm name (not id!)
	Realm     string `uri:"realm"`
	Session   string `uri:"session"`
	IsOffline bool   `form:"isOffline,omitempty"`
}

// Test SMTP connection with current logged in user
// (operationId: AdminRealmsRealmTestSMTPConnectionPost)
type AdminRealmsRealmTestSMTPConnectionPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// (operationId: AdminRealmsRealmUsersManagementPermissionsGet)
type AdminRealmsRealmUsersManagementPermissionsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// (operationId: AdminRealmsRealmUsersManagementPermissionsPut)
type AdminRealmsRealmUsersManagementPermissionsPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

// Get all roles for the realm or client
// (operationId: AdminRealmsRealmClientsClientUuidRolesGet)
type AdminRealmsRealmClientsClientUuidRolesGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid          string `uri:"client-uuid"`
	BriefRepresentation bool   `form:"briefRepresentation,omitempty"`
	First               int32  `form:"first,omitempty"`
	Max                 int32  `form:"max,omitempty"`
	Search              string `form:"search,omitempty"`
}

// Create a new role for the realm or client
// (operationId: AdminRealmsRealmClientsClientUuidRolesPost)
type AdminRealmsRealmClientsClientUuidRolesPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
}

// Get client-level roles for the client that are in the role's composite
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet)
type AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetParam struct {
	// realm name (not id!)
	Realm      string `uri:"realm"`
	ClientUuid string `uri:"client-uuid"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Remove roles from the role's composite
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete)
type AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Get composites of the role
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet)
type AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Add a composite to the role
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost)
type AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Get realm-level roles of the role's composite
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet)
type AdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Delete a role by name
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameDelete)
type AdminRealmsRealmClientsClientUuidRolesRoleNameDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Get a role by name
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameGet)
type AdminRealmsRealmClientsClientUuidRolesRoleNameGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Returns a stream of groups that have the specified role name
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet)
type AdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	// the role name.
	RoleName string `uri:"role-name"`
	// if false, return a full representation of the {@code GroupRepresentation} objects.
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
	// first result to return. Ignored if negative or {@code null}.
	First int32 `form:"first,omitempty"`
	// maximum number of results to return. Ignored if negative or {@code null}.
	Max int32 `form:"max,omitempty"`
}

// Return object stating whether role Authorization permissions have been initialized or not and a reference
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet)
type AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	RoleName   string `uri:"role-name"`
}

// Return object stating whether role Authorization permissions have been initialized or not and a reference
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut)
type AdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	RoleName   string `uri:"role-name"`
}

// Update a role by name
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNamePut)
type AdminRealmsRealmClientsClientUuidRolesRoleNamePutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Returns a stream of users that have the specified role name.
// (operationId: AdminRealmsRealmClientsClientUuidRolesRoleNameUsersGet)
type AdminRealmsRealmClientsClientUuidRolesRoleNameUsersGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// id of client (not client-id!)
	ClientUuid string `uri:"client-uuid"`
	// the role name.
	RoleName string `uri:"role-name"`
	// Boolean which defines whether brief representations are returned (default: false)
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
	// first result to return. Ignored if negative or {@code null}.
	First int32 `form:"first,omitempty"`
	// maximum number of results to return. Ignored if negative or {@code null}.
	Max int32 `form:"max,omitempty"`
}

// Get all roles for the realm or client
// (operationId: AdminRealmsRealmRolesGet)
type AdminRealmsRealmRolesGetParam struct {
	// realm name (not id!)
	Realm               string `uri:"realm"`
	BriefRepresentation bool   `form:"briefRepresentation,omitempty"`
	First               int32  `form:"first,omitempty"`
	Max                 int32  `form:"max,omitempty"`
	Search              string `form:"search,omitempty"`
}

// Create a new role for the realm or client
// (operationId: AdminRealmsRealmRolesPost)
type AdminRealmsRealmRolesPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Get client-level roles for the client that are in the role's composite
// (operationId: AdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet)
type AdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetParam struct {
	// realm name (not id!)
	Realm      string `uri:"realm"`
	ClientUuid string `uri:"client-uuid"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Remove roles from the role's composite
// (operationId: AdminRealmsRealmRolesRoleNameCompositesDelete)
type AdminRealmsRealmRolesRoleNameCompositesDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Get composites of the role
// (operationId: AdminRealmsRealmRolesRoleNameCompositesGet)
type AdminRealmsRealmRolesRoleNameCompositesGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Add a composite to the role
// (operationId: AdminRealmsRealmRolesRoleNameCompositesPost)
type AdminRealmsRealmRolesRoleNameCompositesPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Get realm-level roles of the role's composite
// (operationId: AdminRealmsRealmRolesRoleNameCompositesRealmGet)
type AdminRealmsRealmRolesRoleNameCompositesRealmGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Delete a role by name
// (operationId: AdminRealmsRealmRolesRoleNameDelete)
type AdminRealmsRealmRolesRoleNameDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Get a role by name
// (operationId: AdminRealmsRealmRolesRoleNameGet)
type AdminRealmsRealmRolesRoleNameGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Returns a stream of groups that have the specified role name
// (operationId: AdminRealmsRealmRolesRoleNameGroupsGet)
type AdminRealmsRealmRolesRoleNameGroupsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// the role name.
	RoleName string `uri:"role-name"`
	// if false, return a full representation of the {@code GroupRepresentation} objects.
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
	// first result to return. Ignored if negative or {@code null}.
	First int32 `form:"first,omitempty"`
	// maximum number of results to return. Ignored if negative or {@code null}.
	Max int32 `form:"max,omitempty"`
}

// Return object stating whether role Authorization permissions have been initialized or not and a reference
// (operationId: AdminRealmsRealmRolesRoleNameManagementPermissionsGet)
type AdminRealmsRealmRolesRoleNameManagementPermissionsGetParam struct {
	// realm name (not id!)
	Realm    string `uri:"realm"`
	RoleName string `uri:"role-name"`
}

// Return object stating whether role Authorization permissions have been initialized or not and a reference
// (operationId: AdminRealmsRealmRolesRoleNameManagementPermissionsPut)
type AdminRealmsRealmRolesRoleNameManagementPermissionsPutParam struct {
	// realm name (not id!)
	Realm    string `uri:"realm"`
	RoleName string `uri:"role-name"`
}

// Update a role by name
// (operationId: AdminRealmsRealmRolesRoleNamePut)
type AdminRealmsRealmRolesRoleNamePutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// role's name (not id!)
	RoleName string `uri:"role-name"`
}

// Returns a stream of users that have the specified role name.
// (operationId: AdminRealmsRealmRolesRoleNameUsersGet)
type AdminRealmsRealmRolesRoleNameUsersGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// the role name.
	RoleName string `uri:"role-name"`
	// Boolean which defines whether brief representations are returned (default: false)
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
	// first result to return. Ignored if negative or {@code null}.
	First int32 `form:"first,omitempty"`
	// maximum number of results to return. Ignored if negative or {@code null}.
	Max int32 `form:"max,omitempty"`
}

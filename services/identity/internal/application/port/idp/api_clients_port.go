// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type ClientsAPI interface {

	// Get the client secret
	// (operationId: AdminRealmsRealmClientsClientUuidClientSecretGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/client-secret
	AdminRealmsRealmClientsClientUuidClientSecretGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidClientSecretGetParam) (CredentialRepresentation, error)

	// Generate a new secret for the client
	// (operationId: AdminRealmsRealmClientsClientUuidClientSecretPost)
	// POST /admin/realms/{realm}/clients/{client-uuid}/client-secret
	AdminRealmsRealmClientsClientUuidClientSecretPost(ctx context.Context, param AdminRealmsRealmClientsClientUuidClientSecretPostParam) (CredentialRepresentation, error)

	// Invalidate the rotated secret for the client
	// (operationId: AdminRealmsRealmClientsClientUuidClientSecretRotatedDelete)
	// DELETE /admin/realms/{realm}/clients/{client-uuid}/client-secret/rotated
	AdminRealmsRealmClientsClientUuidClientSecretRotatedDelete(ctx context.Context, param AdminRealmsRealmClientsClientUuidClientSecretRotatedDeleteParam) error

	// Get the rotated client secret
	// (operationId: AdminRealmsRealmClientsClientUuidClientSecretRotatedGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/client-secret/rotated
	AdminRealmsRealmClientsClientUuidClientSecretRotatedGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidClientSecretRotatedGetParam) (CredentialRepresentation, error)

	// (operationId: AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete)
	// DELETE /admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}
	AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete(ctx context.Context, param AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDeleteParam) error

	// (operationId: AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut)
	// PUT /admin/realms/{realm}/clients/{client-uuid}/default-client-scopes/{clientScopeId}
	AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut(ctx context.Context, param AdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPutParam) error

	// Get default client scopes.  Only name and ids are returned.
	// (operationId: AdminRealmsRealmClientsClientUuidDefaultClientScopesGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/default-client-scopes
	AdminRealmsRealmClientsClientUuidDefaultClientScopesGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidDefaultClientScopesGetParam) ([]ClientScopeRepresentation, error)

	// Delete the client
	// (operationId: AdminRealmsRealmClientsClientUuidDelete)
	// DELETE /admin/realms/{realm}/clients/{client-uuid}
	AdminRealmsRealmClientsClientUuidDelete(ctx context.Context, param AdminRealmsRealmClientsClientUuidDeleteParam) error

	// Create JSON with payload of example access token
	// (operationId: AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-access-token
	AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGetParam) (AccessToken, error)

	// Create JSON with payload of example id token
	// (operationId: AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-id-token
	AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGetParam) (IDToken, error)

	// Create JSON with payload of example user info
	// (operationId: AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/generate-example-userinfo
	AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGetParam) (map[string]interface{}, error)

	// Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
	// This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client. (operationId: AdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/protocol-mappers
	AdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGetParam) ([]ProtocolMapperEvaluationRepresentation, error)

	// Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
	// This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client. (operationId: AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/scope-mappings/{roleContainerId}/granted
	AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGetParam) ([]RoleRepresentation, error)

	// Get roles, which this client doesn't have scope for and can't have them in the accessToken issued for him.
	// Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()} (operationId: AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted
	AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGetParam) ([]RoleRepresentation, error)

	// Get representation of the client
	// (operationId: AdminRealmsRealmClientsClientUuidGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}
	AdminRealmsRealmClientsClientUuidGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidGetParam) (ClientRepresentation, error)

	// (operationId: AdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/installation/providers/{providerId}
	AdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGetParam) error

	// Return object stating whether client Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmClientsClientUuidManagementPermissionsGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/management/permissions
	AdminRealmsRealmClientsClientUuidManagementPermissionsGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidManagementPermissionsGetParam) (ManagementPermissionReference, error)

	// Return object stating whether client Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmClientsClientUuidManagementPermissionsPut)
	// PUT /admin/realms/{realm}/clients/{client-uuid}/management/permissions
	AdminRealmsRealmClientsClientUuidManagementPermissionsPut(ctx context.Context, param AdminRealmsRealmClientsClientUuidManagementPermissionsPutParam, req ManagementPermissionReference) (ManagementPermissionReference, error)

	// Unregister a cluster node from the client
	// (operationId: AdminRealmsRealmClientsClientUuidNodesNodeDelete)
	// DELETE /admin/realms/{realm}/clients/{client-uuid}/nodes/{node}
	AdminRealmsRealmClientsClientUuidNodesNodeDelete(ctx context.Context, param AdminRealmsRealmClientsClientUuidNodesNodeDeleteParam) error

	// Register a cluster node with the client Manually register cluster node to this client - usually itâ€™s not needed to call this directly as adapter should handle by sending registration request to Keycloak
	// (operationId: AdminRealmsRealmClientsClientUuidNodesPost)
	// POST /admin/realms/{realm}/clients/{client-uuid}/nodes
	AdminRealmsRealmClientsClientUuidNodesPost(ctx context.Context, param AdminRealmsRealmClientsClientUuidNodesPostParam, req AdminRealmsRealmClientsClientUuidNodesPostReq) error

	// Get application offline session count Returns a number of offline user sessions associated with this client { \"count\": number }
	// (operationId: AdminRealmsRealmClientsClientUuidOfflineSessionCountGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/offline-session-count
	AdminRealmsRealmClientsClientUuidOfflineSessionCountGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidOfflineSessionCountGetParam) (map[string]int64, error)

	// Get offline sessions for client Returns a list of offline user sessions associated with this client
	// (operationId: AdminRealmsRealmClientsClientUuidOfflineSessionsGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/offline-sessions
	AdminRealmsRealmClientsClientUuidOfflineSessionsGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidOfflineSessionsGetParam) ([]UserSessionRepresentation, error)

	// (operationId: AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete)
	// DELETE /admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}
	AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete(ctx context.Context, param AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDeleteParam) error

	// (operationId: AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut)
	// PUT /admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes/{clientScopeId}
	AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut(ctx context.Context, param AdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPutParam) error

	// Get optional client scopes.  Only name and ids are returned.
	// (operationId: AdminRealmsRealmClientsClientUuidOptionalClientScopesGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/optional-client-scopes
	AdminRealmsRealmClientsClientUuidOptionalClientScopesGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidOptionalClientScopesGetParam) ([]ClientScopeRepresentation, error)

	// Push the client's revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
	// (operationId: AdminRealmsRealmClientsClientUuidPushRevocationPost)
	// POST /admin/realms/{realm}/clients/{client-uuid}/push-revocation
	AdminRealmsRealmClientsClientUuidPushRevocationPost(ctx context.Context, param AdminRealmsRealmClientsClientUuidPushRevocationPostParam) (GlobalRequestResult, error)

	// Update the client
	// (operationId: AdminRealmsRealmClientsClientUuidPut)
	// PUT /admin/realms/{realm}/clients/{client-uuid}
	AdminRealmsRealmClientsClientUuidPut(ctx context.Context, param AdminRealmsRealmClientsClientUuidPutParam, req ClientRepresentation) error

	// Generate a new registration access token for the client
	// (operationId: AdminRealmsRealmClientsClientUuidRegistrationAccessTokenPost)
	// POST /admin/realms/{realm}/clients/{client-uuid}/registration-access-token
	AdminRealmsRealmClientsClientUuidRegistrationAccessTokenPost(ctx context.Context, param AdminRealmsRealmClientsClientUuidRegistrationAccessTokenPostParam) (ClientRepresentation, error)

	// Get a user dedicated to the service account
	// (operationId: AdminRealmsRealmClientsClientUuidServiceAccountUserGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/service-account-user
	AdminRealmsRealmClientsClientUuidServiceAccountUserGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidServiceAccountUserGetParam) (UserRepresentation, error)

	// Get application session count Returns a number of user sessions associated with this client { \"count\": number }
	// (operationId: AdminRealmsRealmClientsClientUuidSessionCountGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/session-count
	AdminRealmsRealmClientsClientUuidSessionCountGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidSessionCountGetParam) (map[string]int64, error)

	// Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes.
	// (operationId: AdminRealmsRealmClientsClientUuidTestNodesAvailableGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/test-nodes-available
	AdminRealmsRealmClientsClientUuidTestNodesAvailableGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidTestNodesAvailableGetParam) (GlobalRequestResult, error)

	// Get user sessions for client Returns a list of user sessions associated with this client
	// (operationId: AdminRealmsRealmClientsClientUuidUserSessionsGet)
	// GET /admin/realms/{realm}/clients/{client-uuid}/user-sessions
	AdminRealmsRealmClientsClientUuidUserSessionsGet(ctx context.Context, param AdminRealmsRealmClientsClientUuidUserSessionsGetParam) ([]UserSessionRepresentation, error)

	// Get clients belonging to the realm.
	// If a client canâ€™t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list donâ€™t prevent callers from retrieving this list. (operationId: AdminRealmsRealmClientsGet)
	// GET /admin/realms/{realm}/clients
	AdminRealmsRealmClientsGet(ctx context.Context, param AdminRealmsRealmClientsGetParam) ([]ClientRepresentation, error)

	// Create a new client Clientâ€™s client_id must be unique!
	// (operationId: AdminRealmsRealmClientsPost)
	// POST /admin/realms/{realm}/clients
	AdminRealmsRealmClientsPost(ctx context.Context, param AdminRealmsRealmClientsPostParam, req ClientRepresentation) error
}

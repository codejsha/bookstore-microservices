// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type RolesByIDAPI interface {

	// Get client-level roles for the client that are in the role's composite
	// (operationId: AdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet)
	// GET /admin/realms/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}
	AdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet(ctx context.Context, param AdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetParam) ([]RoleRepresentation, error)

	// Remove a set of roles from the role's composite
	// (operationId: AdminRealmsRealmRolesByIdRoleIdCompositesDelete)
	// DELETE /admin/realms/{realm}/roles-by-id/{role-id}/composites
	AdminRealmsRealmRolesByIdRoleIdCompositesDelete(ctx context.Context, param AdminRealmsRealmRolesByIdRoleIdCompositesDeleteParam, req AdminRealmsRealmRolesByIdRoleIdCompositesDeleteReq) error

	// Get role's children Returns a set of role's children provided the role is a composite.
	// (operationId: AdminRealmsRealmRolesByIdRoleIdCompositesGet)
	// GET /admin/realms/{realm}/roles-by-id/{role-id}/composites
	AdminRealmsRealmRolesByIdRoleIdCompositesGet(ctx context.Context, param AdminRealmsRealmRolesByIdRoleIdCompositesGetParam) ([]RoleRepresentation, error)

	// Make the role a composite role by associating some child roles
	// (operationId: AdminRealmsRealmRolesByIdRoleIdCompositesPost)
	// POST /admin/realms/{realm}/roles-by-id/{role-id}/composites
	AdminRealmsRealmRolesByIdRoleIdCompositesPost(ctx context.Context, param AdminRealmsRealmRolesByIdRoleIdCompositesPostParam, req AdminRealmsRealmRolesByIdRoleIdCompositesPostReq) error

	// Get realm-level roles that are in the role's composite
	// (operationId: AdminRealmsRealmRolesByIdRoleIdCompositesRealmGet)
	// GET /admin/realms/{realm}/roles-by-id/{role-id}/composites/realm
	AdminRealmsRealmRolesByIdRoleIdCompositesRealmGet(ctx context.Context, param AdminRealmsRealmRolesByIdRoleIdCompositesRealmGetParam) ([]RoleRepresentation, error)

	// Delete the role
	// (operationId: AdminRealmsRealmRolesByIdRoleIdDelete)
	// DELETE /admin/realms/{realm}/roles-by-id/{role-id}
	AdminRealmsRealmRolesByIdRoleIdDelete(ctx context.Context, param AdminRealmsRealmRolesByIdRoleIdDeleteParam) error

	// Get a specific role's representation
	// (operationId: AdminRealmsRealmRolesByIdRoleIdGet)
	// GET /admin/realms/{realm}/roles-by-id/{role-id}
	AdminRealmsRealmRolesByIdRoleIdGet(ctx context.Context, param AdminRealmsRealmRolesByIdRoleIdGetParam) (RoleRepresentation, error)

	// Return object stating whether role Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmRolesByIdRoleIdManagementPermissionsGet)
	// GET /admin/realms/{realm}/roles-by-id/{role-id}/management/permissions
	AdminRealmsRealmRolesByIdRoleIdManagementPermissionsGet(ctx context.Context, param AdminRealmsRealmRolesByIdRoleIdManagementPermissionsGetParam) (ManagementPermissionReference, error)

	// Return object stating whether role Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmRolesByIdRoleIdManagementPermissionsPut)
	// PUT /admin/realms/{realm}/roles-by-id/{role-id}/management/permissions
	AdminRealmsRealmRolesByIdRoleIdManagementPermissionsPut(ctx context.Context, param AdminRealmsRealmRolesByIdRoleIdManagementPermissionsPutParam, req ManagementPermissionReference) (ManagementPermissionReference, error)

	// Update the role
	// (operationId: AdminRealmsRealmRolesByIdRoleIdPut)
	// PUT /admin/realms/{realm}/roles-by-id/{role-id}
	AdminRealmsRealmRolesByIdRoleIdPut(ctx context.Context, param AdminRealmsRealmRolesByIdRoleIdPutParam, req RoleRepresentation) error
}

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type GroupsAPI interface {

	// Returns the groups counts.
	// (operationId: AdminRealmsRealmGroupsCountGet)
	// GET /admin/realms/{realm}/groups/count
	AdminRealmsRealmGroupsCountGet(ctx context.Context, param AdminRealmsRealmGroupsCountGetParam) (map[string]int64, error)

	// Get group hierarchy.  Only `name` and `id` are returned.  `subGroups` are only returned when using the `search` or `q` parameter. If none of these parameters is provided, the top-level groups are returned without `subGroups` being filled.
	// (operationId: AdminRealmsRealmGroupsGet)
	// GET /admin/realms/{realm}/groups
	AdminRealmsRealmGroupsGet(ctx context.Context, param AdminRealmsRealmGroupsGetParam) ([]GroupRepresentation, error)

	// Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
	// (operationId: AdminRealmsRealmGroupsGroupIdChildrenGet)
	// GET /admin/realms/{realm}/groups/{group-id}/children
	AdminRealmsRealmGroupsGroupIdChildrenGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdChildrenGetParam) ([]GroupRepresentation, error)

	// Set or create child.
	// This will just set the parent if it exists. Create it and set the parent if the group doesn’t exist. (operationId: AdminRealmsRealmGroupsGroupIdChildrenPost)
	// POST /admin/realms/{realm}/groups/{group-id}/children
	AdminRealmsRealmGroupsGroupIdChildrenPost(ctx context.Context, param AdminRealmsRealmGroupsGroupIdChildrenPostParam, req GroupRepresentation) error

	// (operationId: AdminRealmsRealmGroupsGroupIdDelete)
	// DELETE /admin/realms/{realm}/groups/{group-id}
	AdminRealmsRealmGroupsGroupIdDelete(ctx context.Context, param AdminRealmsRealmGroupsGroupIdDeleteParam) error

	// (operationId: AdminRealmsRealmGroupsGroupIdGet)
	// GET /admin/realms/{realm}/groups/{group-id}
	AdminRealmsRealmGroupsGroupIdGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdGetParam) (GroupRepresentation, error)

	// Return object stating whether client Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmGroupsGroupIdManagementPermissionsGet)
	// GET /admin/realms/{realm}/groups/{group-id}/management/permissions
	AdminRealmsRealmGroupsGroupIdManagementPermissionsGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdManagementPermissionsGetParam) (ManagementPermissionReference, error)

	// Return object stating whether client Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmGroupsGroupIdManagementPermissionsPut)
	// PUT /admin/realms/{realm}/groups/{group-id}/management/permissions
	AdminRealmsRealmGroupsGroupIdManagementPermissionsPut(ctx context.Context, param AdminRealmsRealmGroupsGroupIdManagementPermissionsPutParam, req ManagementPermissionReference) (ManagementPermissionReference, error)

	// Get users Returns a stream of users, filtered according to query parameters
	// (operationId: AdminRealmsRealmGroupsGroupIdMembersGet)
	// GET /admin/realms/{realm}/groups/{group-id}/members
	AdminRealmsRealmGroupsGroupIdMembersGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdMembersGetParam) ([]UserRepresentation, error)

	// Update group, ignores subgroups.
	// (operationId: AdminRealmsRealmGroupsGroupIdPut)
	// PUT /admin/realms/{realm}/groups/{group-id}
	AdminRealmsRealmGroupsGroupIdPut(ctx context.Context, param AdminRealmsRealmGroupsGroupIdPutParam, req GroupRepresentation) error

	// create or add a top level realm groupSet or create child.
	// This will update the group and set the parent if it exists. Create it and set the parent if the group doesn’t exist. (operationId: AdminRealmsRealmGroupsPost)
	// POST /admin/realms/{realm}/groups
	AdminRealmsRealmGroupsPost(ctx context.Context, param AdminRealmsRealmGroupsPostParam, req GroupRepresentation) error
}

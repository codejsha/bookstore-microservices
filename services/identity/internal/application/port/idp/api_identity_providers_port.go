// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type IdentityProvidersAPI interface {

	// Import identity provider from JSON body
	// Import identity provider from uploaded JSON file (operationId: AdminRealmsRealmIdentityProviderImportConfigPost)
	// POST /admin/realms/{realm}/identity-provider/import-config
	AdminRealmsRealmIdentityProviderImportConfigPost(ctx context.Context, param AdminRealmsRealmIdentityProviderImportConfigPostParam, req AdminRealmsRealmIdentityProviderImportConfigPostReq) (map[string]string, error)

	// Delete the identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasDelete)
	// DELETE /admin/realms/{realm}/identity-provider/instances/{alias}
	AdminRealmsRealmIdentityProviderInstancesAliasDelete(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasDeleteParam) error

	// Export public broker configuration for identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasExportGet)
	// GET /admin/realms/{realm}/identity-provider/instances/{alias}/export
	AdminRealmsRealmIdentityProviderInstancesAliasExportGet(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasExportGetParam) error

	// Get the identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasGet)
	// GET /admin/realms/{realm}/identity-provider/instances/{alias}
	AdminRealmsRealmIdentityProviderInstancesAliasGet(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasGetParam) (IdentityProviderRepresentation, error)

	// Return object stating whether client Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet)
	// GET /admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions
	AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetParam) (ManagementPermissionReference, error)

	// Return object stating whether client Authorization permissions have been initialized or not and a reference
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut)
	// PUT /admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions
	AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutParam, req ManagementPermissionReference) (ManagementPermissionReference, error)

	// Get mapper types for identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet)
	// GET /admin/realms/{realm}/identity-provider/instances/{alias}/mapper-types
	AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetParam) (map[string]IdentityProviderMapperTypeRepresentation, error)

	// Get mappers for identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMappersGet)
	// GET /admin/realms/{realm}/identity-provider/instances/{alias}/mappers
	AdminRealmsRealmIdentityProviderInstancesAliasMappersGet(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasMappersGetParam) ([]IdentityProviderMapperRepresentation, error)

	// Delete a mapper for the identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete)
	// DELETE /admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}
	AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteParam) error

	// Get mapper by id for the identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGet)
	// GET /admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}
	AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGet(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetParam) (IdentityProviderMapperRepresentation, error)

	// Update a mapper for the identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPut)
	// PUT /admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}
	AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPut(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutParam, req IdentityProviderMapperRepresentation) error

	// Add a mapper to identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMappersPost)
	// POST /admin/realms/{realm}/identity-provider/instances/{alias}/mappers
	AdminRealmsRealmIdentityProviderInstancesAliasMappersPost(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasMappersPostParam, req IdentityProviderMapperRepresentation) error

	// Update the identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasPut)
	// PUT /admin/realms/{realm}/identity-provider/instances/{alias}
	AdminRealmsRealmIdentityProviderInstancesAliasPut(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasPutParam, req IdentityProviderRepresentation) error

	// Reaload keys for the identity provider if the provider supports it, \"true\" is returned if reload was performed, \"false\" if not.
	// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet)
	// GET /admin/realms/{realm}/identity-provider/instances/{alias}/reload-keys
	AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetParam) (bool, error)

	// List identity providers
	// (operationId: AdminRealmsRealmIdentityProviderInstancesGet)
	// GET /admin/realms/{realm}/identity-provider/instances
	AdminRealmsRealmIdentityProviderInstancesGet(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesGetParam) ([]IdentityProviderRepresentation, error)

	// Create a new identity provider
	// (operationId: AdminRealmsRealmIdentityProviderInstancesPost)
	// POST /admin/realms/{realm}/identity-provider/instances
	AdminRealmsRealmIdentityProviderInstancesPost(ctx context.Context, param AdminRealmsRealmIdentityProviderInstancesPostParam, req IdentityProviderRepresentation) error

	// Get the identity provider factory for that provider id
	// (operationId: AdminRealmsRealmIdentityProviderProvidersProviderIdGet)
	// GET /admin/realms/{realm}/identity-provider/providers/{provider_id}
	AdminRealmsRealmIdentityProviderProvidersProviderIdGet(ctx context.Context, param AdminRealmsRealmIdentityProviderProvidersProviderIdGetParam) (map[string]interface{}, error)
}

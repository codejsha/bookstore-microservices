// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type RoleMapperAPI interface {

	// Get role mappings
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsGet)
	// GET /admin/realms/{realm}/groups/{group-id}/role-mappings
	AdminRealmsRealmGroupsGroupIdRoleMappingsGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsGetParam) (MappingsRepresentation, error)

	// Get realm-level roles that can be mapped
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGet)
	// GET /admin/realms/{realm}/groups/{group-id}/role-mappings/realm/available
	AdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGetParam) ([]RoleRepresentation, error)

	// Get effective realm-level role mappings This will recurse all composite roles to get the result.
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGet)
	// GET /admin/realms/{realm}/groups/{group-id}/role-mappings/realm/composite
	AdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGetParam) ([]RoleRepresentation, error)

	// Delete realm-level role mappings
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDelete)
	// DELETE /admin/realms/{realm}/groups/{group-id}/role-mappings/realm
	AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDelete(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDeleteParam, req AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDeleteReq) error

	// Get realm-level role mappings
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmGet)
	// GET /admin/realms/{realm}/groups/{group-id}/role-mappings/realm
	AdminRealmsRealmGroupsGroupIdRoleMappingsRealmGet(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsRealmGetParam) ([]RoleRepresentation, error)

	// Add realm-level role mappings to the user
	// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPost)
	// POST /admin/realms/{realm}/groups/{group-id}/role-mappings/realm
	AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPost(ctx context.Context, param AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPostParam, req AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPostReq) error

	// Get role mappings
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsGet)
	// GET /admin/realms/{realm}/users/{user-id}/role-mappings
	AdminRealmsRealmUsersUserIdRoleMappingsGet(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsGetParam) (MappingsRepresentation, error)

	// Get realm-level roles that can be mapped
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGet)
	// GET /admin/realms/{realm}/users/{user-id}/role-mappings/realm/available
	AdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGet(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGetParam) ([]RoleRepresentation, error)

	// Get effective realm-level role mappings This will recurse all composite roles to get the result.
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGet)
	// GET /admin/realms/{realm}/users/{user-id}/role-mappings/realm/composite
	AdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGet(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGetParam) ([]RoleRepresentation, error)

	// Delete realm-level role mappings
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsRealmDelete)
	// DELETE /admin/realms/{realm}/users/{user-id}/role-mappings/realm
	AdminRealmsRealmUsersUserIdRoleMappingsRealmDelete(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsRealmDeleteParam, req AdminRealmsRealmUsersUserIdRoleMappingsRealmDeleteReq) error

	// Get realm-level role mappings
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsRealmGet)
	// GET /admin/realms/{realm}/users/{user-id}/role-mappings/realm
	AdminRealmsRealmUsersUserIdRoleMappingsRealmGet(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsRealmGetParam) ([]RoleRepresentation, error)

	// Add realm-level role mappings to the user
	// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsRealmPost)
	// POST /admin/realms/{realm}/users/{user-id}/role-mappings/realm
	AdminRealmsRealmUsersUserIdRoleMappingsRealmPost(ctx context.Context, param AdminRealmsRealmUsersUserIdRoleMappingsRealmPostParam, req AdminRealmsRealmUsersUserIdRoleMappingsRealmPostReq) error
}

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

// Returns the number of users that match the given criteria.
// It can be called in three different ways. 1. Donâ€™t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. <p> 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. <p> 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and. (operationId: AdminRealmsRealmUsersCountGet)
type AdminRealmsRealmUsersCountGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// email filter
	Email         string `form:"email,omitempty"`
	EmailVerified bool   `form:"emailVerified,omitempty"`
	// Boolean representing if user is enabled or not
	Enabled bool `form:"enabled,omitempty"`
	// first name filter
	FirstName string `form:"firstName,omitempty"`
	// last name filter
	LastName string `form:"lastName,omitempty"`
	Q        string `form:"q,omitempty"`
	// arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and \"foo\" for exact search.
	Search string `form:"search,omitempty"`
	// username filter
	Username string `form:"username,omitempty"`
}

// Get users Returns a stream of users, filtered according to query parameters.
// (operationId: AdminRealmsRealmUsersGet)
type AdminRealmsRealmUsersGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// Boolean which defines whether brief representations are returned (default: false)
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
	// A String contained in email, or the complete email, if param \"exact\" is true
	Email string `form:"email,omitempty"`
	// whether the email has been verified
	EmailVerified bool `form:"emailVerified,omitempty"`
	// Boolean representing if user is enabled or not
	Enabled bool `form:"enabled,omitempty"`
	// Boolean which defines whether the params \"last\", \"first\", \"email\" and \"username\" must match exactly
	Exact bool `form:"exact,omitempty"`
	// Pagination offset
	First int32 `form:"first,omitempty"`
	// A String contained in firstName, or the complete firstName, if param \"exact\" is true
	FirstName string `form:"firstName,omitempty"`
	// The alias of an Identity Provider linked to the user
	IdpAlias string `form:"idpAlias,omitempty"`
	// The userId at an Identity Provider linked to the user
	IdpUserId string `form:"idpUserId,omitempty"`
	// A String contained in lastName, or the complete lastName, if param \"exact\" is true
	LastName string `form:"lastName,omitempty"`
	// Maximum results size (defaults to 100)
	Max int32 `form:"max,omitempty"`
	// A query to search for custom attributes, in the format 'key1:value2 key2:value2'
	Q string `form:"q,omitempty"`
	// A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and \"foo\" for exact search.
	Search string `form:"search,omitempty"`
	// A String contained in username, or the complete username, if param \"exact\" is true
	Username string `form:"username,omitempty"`
}

// Create a new user Username must be unique.
// (operationId: AdminRealmsRealmUsersPost)
type AdminRealmsRealmUsersPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Get the configuration for the user profile (operationId: AdminRealmsRealmUsersProfileGet)
type AdminRealmsRealmUsersProfileGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Get the UserProfileMetadata from the configuration (operationId: AdminRealmsRealmUsersProfileMetadataGet)
type AdminRealmsRealmUsersProfileMetadataGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Set the configuration for the user profile (operationId: AdminRealmsRealmUsersProfilePut)
type AdminRealmsRealmUsersProfilePutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Return credential types, which are provided by the user storage where user is stored.
// Returned values can contain for example "password", "otp" etc. This will always return empty list for "local" users, which are not backed by any user storage (operationId: AdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet)
type AdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Revoke consent and offline tokens for particular client from user
// (operationId: AdminRealmsRealmUsersUserIdConsentsClientDelete)
type AdminRealmsRealmUsersUserIdConsentsClientDeleteParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// Client id
	Client string `uri:"client"`
}

// Get consents granted by the user
// (operationId: AdminRealmsRealmUsersUserIdConsentsGet)
type AdminRealmsRealmUsersUserIdConsentsGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Remove a credential for a user
// (operationId: AdminRealmsRealmUsersUserIdCredentialsCredentialIdDelete)
type AdminRealmsRealmUsersUserIdCredentialsCredentialIdDeleteParam struct {
	// realm name (not id!)
	Realm        string `uri:"realm"`
	UserId       string `uri:"user-id"`
	CredentialId string `uri:"credentialId"`
}

// Move a credential to a position behind another credential
// (operationId: AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost)
type AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPostParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// The credential to move
	CredentialId string `uri:"credentialId"`
	// The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.
	NewPreviousCredentialId string `uri:"newPreviousCredentialId"`
}

// Move a credential to a first position in the credentials list of the user
// (operationId: AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost)
type AdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPostParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// The credential to move
	CredentialId string `uri:"credentialId"`
}

// Update a credential label for a user
// (operationId: AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut)
type AdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPutParam struct {
	// realm name (not id!)
	Realm        string `uri:"realm"`
	UserId       string `uri:"user-id"`
	CredentialId string `uri:"credentialId"`
}

// (operationId: AdminRealmsRealmUsersUserIdCredentialsGet)
type AdminRealmsRealmUsersUserIdCredentialsGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Delete the user
// (operationId: AdminRealmsRealmUsersUserIdDelete)
type AdminRealmsRealmUsersUserIdDeleteParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Disable all credentials for a user of a specific type
// (operationId: AdminRealmsRealmUsersUserIdDisableCredentialTypesPut)
type AdminRealmsRealmUsersUserIdDisableCredentialTypesPutParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Send an email to the user with a link they can click to execute particular actions.
// An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId. (operationId: AdminRealmsRealmUsersUserIdExecuteActionsEmailPut)
type AdminRealmsRealmUsersUserIdExecuteActionsEmailPutParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// Client id
	ClientId string `form:"client_id,omitempty"`
	// Number of seconds after which the generated token expires
	Lifespan int32 `form:"lifespan,omitempty"`
	// Redirect uri
	RedirectUri string `form:"redirect_uri,omitempty"`
}

// Get social logins associated with the user
// (operationId: AdminRealmsRealmUsersUserIdFederatedIdentityGet)
type AdminRealmsRealmUsersUserIdFederatedIdentityGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Remove a social login provider from user
// (operationId: AdminRealmsRealmUsersUserIdFederatedIdentityProviderDelete)
type AdminRealmsRealmUsersUserIdFederatedIdentityProviderDeleteParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// Social login provider id
	Provider string `uri:"provider"`
}

// Add a social login provider to the user
// (operationId: AdminRealmsRealmUsersUserIdFederatedIdentityProviderPost)
type AdminRealmsRealmUsersUserIdFederatedIdentityProviderPostParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// Social login provider id
	Provider string `uri:"provider"`
}

// Get representation of the user
// (operationId: AdminRealmsRealmUsersUserIdGet)
type AdminRealmsRealmUsersUserIdGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// Indicates if the user profile metadata should be added to the response
	UserProfileMetadata bool `form:"userProfileMetadata,omitempty"`
}

// (operationId: AdminRealmsRealmUsersUserIdGroupsCountGet)
type AdminRealmsRealmUsersUserIdGroupsCountGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	Search string `form:"search,omitempty"`
}

// (operationId: AdminRealmsRealmUsersUserIdGroupsGet)
type AdminRealmsRealmUsersUserIdGroupsGetParam struct {
	// realm name (not id!)
	Realm               string `uri:"realm"`
	UserId              string `uri:"user-id"`
	BriefRepresentation bool   `form:"briefRepresentation,omitempty"`
	First               int32  `form:"first,omitempty"`
	Max                 int32  `form:"max,omitempty"`
	Search              string `form:"search,omitempty"`
}

// (operationId: AdminRealmsRealmUsersUserIdGroupsGroupIdDelete)
type AdminRealmsRealmUsersUserIdGroupsGroupIdDeleteParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	UserId  string `uri:"user-id"`
	GroupId string `uri:"groupId"`
}

// (operationId: AdminRealmsRealmUsersUserIdGroupsGroupIdPut)
type AdminRealmsRealmUsersUserIdGroupsGroupIdPutParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	UserId  string `uri:"user-id"`
	GroupId string `uri:"groupId"`
}

// Impersonate the user
// (operationId: AdminRealmsRealmUsersUserIdImpersonationPost)
type AdminRealmsRealmUsersUserIdImpersonationPostParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
// (operationId: AdminRealmsRealmUsersUserIdLogoutPost)
type AdminRealmsRealmUsersUserIdLogoutPostParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Get offline sessions associated with the user and client
// (operationId: AdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet)
type AdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGetParam struct {
	// realm name (not id!)
	Realm      string `uri:"realm"`
	UserId     string `uri:"user-id"`
	ClientUuid string `uri:"clientUuid"`
}

// Update the user
// (operationId: AdminRealmsRealmUsersUserIdPut)
type AdminRealmsRealmUsersUserIdPutParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Send an email to the user with a link they can click to reset their password.
// The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it. (operationId: AdminRealmsRealmUsersUserIdResetPasswordEmailPut)
type AdminRealmsRealmUsersUserIdResetPasswordEmailPutParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// client id
	ClientId string `form:"client_id,omitempty"`
	// redirect uri
	RedirectUri string `form:"redirect_uri,omitempty"`
}

// Set up a new password for the user.
// (operationId: AdminRealmsRealmUsersUserIdResetPasswordPut)
type AdminRealmsRealmUsersUserIdResetPasswordPutParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Send an email-verification email to the user An email contains a link the user can click to verify their email address.
// The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours (operationId: AdminRealmsRealmUsersUserIdSendVerifyEmailPut)
type AdminRealmsRealmUsersUserIdSendVerifyEmailPutParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// Client id
	ClientId string `form:"client_id,omitempty"`
	// Number of seconds after which the generated token expires
	Lifespan int32 `form:"lifespan,omitempty"`
	// Redirect uri
	RedirectUri string `form:"redirect_uri,omitempty"`
}

// Get sessions associated with the user
// (operationId: AdminRealmsRealmUsersUserIdSessionsGet)
type AdminRealmsRealmUsersUserIdSessionsGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// (operationId: AdminRealmsRealmUsersUserIdUnmanagedAttributesGet)
type AdminRealmsRealmUsersUserIdUnmanagedAttributesGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

// Import identity provider from JSON body
// Import identity provider from uploaded JSON file (operationId: AdminRealmsRealmIdentityProviderImportConfigPost)
type AdminRealmsRealmIdentityProviderImportConfigPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Delete the identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasDelete)
type AdminRealmsRealmIdentityProviderInstancesAliasDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
}

// Export public broker configuration for identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasExportGet)
type AdminRealmsRealmIdentityProviderInstancesAliasExportGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
	// Format to use
	Format string `form:"format,omitempty"`
}

// Get the identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasGet)
type AdminRealmsRealmIdentityProviderInstancesAliasGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
}

// Return object stating whether client Authorization permissions have been initialized or not and a reference
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet)
type AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
}

// Return object stating whether client Authorization permissions have been initialized or not and a reference
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut)
type AdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
}

// Get mapper types for identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet)
type AdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
}

// Get mappers for identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMappersGet)
type AdminRealmsRealmIdentityProviderInstancesAliasMappersGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
}

// Delete a mapper for the identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete)
type AdminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
	// Mapper id
	Id string `uri:"id"`
}

// Get mapper by id for the identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGet)
type AdminRealmsRealmIdentityProviderInstancesAliasMappersIdGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
	Id    string `uri:"id"`
}

// Update a mapper for the identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPut)
type AdminRealmsRealmIdentityProviderInstancesAliasMappersIdPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
	// Mapper id
	Id string `uri:"id"`
}

// Add a mapper to identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasMappersPost)
type AdminRealmsRealmIdentityProviderInstancesAliasMappersPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
}

// Update the identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasPut)
type AdminRealmsRealmIdentityProviderInstancesAliasPutParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
}

// Reaload keys for the identity provider if the provider supports it, \"true\" is returned if reload was performed, \"false\" if not.
// (operationId: AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet)
type AdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	Alias string `uri:"alias"`
}

// List identity providers
// (operationId: AdminRealmsRealmIdentityProviderInstancesGet)
type AdminRealmsRealmIdentityProviderInstancesGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// Boolean which defines whether brief representations are returned (default: false)
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
	// Pagination offset
	First int32 `form:"first,omitempty"`
	// Maximum results size (defaults to 100)
	Max int32 `form:"max,omitempty"`
	// Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false)
	RealmOnly bool `form:"realmOnly,omitempty"`
	// Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\"name\"). Default prefixed.
	Search string `form:"search,omitempty"`
}

// Create a new identity provider
// (operationId: AdminRealmsRealmIdentityProviderInstancesPost)
type AdminRealmsRealmIdentityProviderInstancesPostParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
}

// Get the identity provider factory for that provider id
// (operationId: AdminRealmsRealmIdentityProviderProvidersProviderIdGet)
type AdminRealmsRealmIdentityProviderProvidersProviderIdGetParam struct {
	// realm name (not id!)
	Realm string `uri:"realm"`
	// The provider id to get the factory
	ProviderId string `uri:"provider_id"`
}

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

// Get role mappings
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsGet)
type AdminRealmsRealmGroupsGroupIdRoleMappingsGetParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
}

// Get realm-level roles that can be mapped
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGet)
type AdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGetParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
}

// Get effective realm-level role mappings This will recurse all composite roles to get the result.
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGet)
type AdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGetParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
	// if false, return roles with their attributes
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Delete realm-level role mappings
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDelete)
type AdminRealmsRealmGroupsGroupIdRoleMappingsRealmDeleteParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
}

// Get realm-level role mappings
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmGet)
type AdminRealmsRealmGroupsGroupIdRoleMappingsRealmGetParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
}

// Add realm-level role mappings to the user
// (operationId: AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPost)
type AdminRealmsRealmGroupsGroupIdRoleMappingsRealmPostParam struct {
	// realm name (not id!)
	Realm   string `uri:"realm"`
	GroupId string `uri:"group-id"`
}

// Get role mappings
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsGet)
type AdminRealmsRealmUsersUserIdRoleMappingsGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Get realm-level roles that can be mapped
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGet)
type AdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Get effective realm-level role mappings This will recurse all composite roles to get the result.
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGet)
type AdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
	// if false, return roles with their attributes
	BriefRepresentation bool `form:"briefRepresentation,omitempty"`
}

// Delete realm-level role mappings
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsRealmDelete)
type AdminRealmsRealmUsersUserIdRoleMappingsRealmDeleteParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Get realm-level role mappings
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsRealmGet)
type AdminRealmsRealmUsersUserIdRoleMappingsRealmGetParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

// Add realm-level role mappings to the user
// (operationId: AdminRealmsRealmUsersUserIdRoleMappingsRealmPost)
type AdminRealmsRealmUsersUserIdRoleMappingsRealmPostParam struct {
	// realm name (not id!)
	Realm  string `uri:"realm"`
	UserId string `uri:"user-id"`
}

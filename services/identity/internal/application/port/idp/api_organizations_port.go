// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type OrganizationsAPI interface {

	// Returns a paginated list of organizations filtered according to the specified parameters
	// (operationId: AdminRealmsRealmOrganizationsGet)
	// GET /admin/realms/{realm}/organizations
	AdminRealmsRealmOrganizationsGet(ctx context.Context, param AdminRealmsRealmOrganizationsGetParam) ([]OrganizationRepresentation, error)

	// Returns the organizations associated with the user that has the specified id
	// (operationId: AdminRealmsRealmOrganizationsMembersMemberIdOrganizationsGet)
	// GET /admin/realms/{realm}/organizations/members/{member-id}/organizations
	AdminRealmsRealmOrganizationsMembersMemberIdOrganizationsGet(ctx context.Context, param AdminRealmsRealmOrganizationsMembersMemberIdOrganizationsGetParam) ([]OrganizationRepresentation, error)

	// Deletes the organization
	// (operationId: AdminRealmsRealmOrganizationsOrgIdDelete)
	// DELETE /admin/realms/{realm}/organizations/{org-id}
	AdminRealmsRealmOrganizationsOrgIdDelete(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdDeleteParam) error

	// Returns the organization representation
	// (operationId: AdminRealmsRealmOrganizationsOrgIdGet)
	// GET /admin/realms/{realm}/organizations/{org-id}
	AdminRealmsRealmOrganizationsOrgIdGet(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdGetParam) (OrganizationRepresentation, error)

	// Removes the identity provider with the specified alias from the organization
	// Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned (operationId: AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDelete)
	// DELETE /admin/realms/{realm}/organizations/{org-id}/identity-providers/{alias}
	AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDelete(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasDeleteParam) error

	// Returns the identity provider associated with the organization that has the specified alias
	// Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned (operationId: AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGet)
	// GET /admin/realms/{realm}/organizations/{org-id}/identity-providers/{alias}
	AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGet(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdIdentityProvidersAliasGetParam) (IdentityProviderRepresentation, error)

	// Returns all identity providers associated with the organization
	// (operationId: AdminRealmsRealmOrganizationsOrgIdIdentityProvidersGet)
	// GET /admin/realms/{realm}/organizations/{org-id}/identity-providers
	AdminRealmsRealmOrganizationsOrgIdIdentityProvidersGet(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdIdentityProvidersGetParam) ([]IdentityProviderRepresentation, error)

	// Adds the identity provider with the specified id to the organization
	// Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned (operationId: AdminRealmsRealmOrganizationsOrgIdIdentityProvidersPost)
	// POST /admin/realms/{realm}/organizations/{org-id}/identity-providers
	AdminRealmsRealmOrganizationsOrgIdIdentityProvidersPost(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdIdentityProvidersPostParam, req AdminRealmsRealmOrganizationsOrgIdIdentityProvidersPostReq) error

	// Returns number of members in the organization.
	// (operationId: AdminRealmsRealmOrganizationsOrgIdMembersCountGet)
	// GET /admin/realms/{realm}/organizations/{org-id}/members/count
	AdminRealmsRealmOrganizationsOrgIdMembersCountGet(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdMembersCountGetParam) (int64, error)

	// Returns a paginated list of organization members filtered according to the specified parameters
	// (operationId: AdminRealmsRealmOrganizationsOrgIdMembersGet)
	// GET /admin/realms/{realm}/organizations/{org-id}/members
	AdminRealmsRealmOrganizationsOrgIdMembersGet(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdMembersGetParam) ([]MemberRepresentation, error)

	// Invites an existing user to the organization, using the specified user id
	// (operationId: AdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPost)
	// POST /admin/realms/{realm}/organizations/{org-id}/members/invite-existing-user
	AdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPost(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdMembersInviteExistingUserPostParam) error

	// Invites an existing user or sends a registration link to a new user, based on the provided e-mail address.
	// If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link. (operationId: AdminRealmsRealmOrganizationsOrgIdMembersInviteUserPost)
	// POST /admin/realms/{realm}/organizations/{org-id}/members/invite-user
	AdminRealmsRealmOrganizationsOrgIdMembersInviteUserPost(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdMembersInviteUserPostParam) error

	// Removes the user with the specified id from the organization
	// Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned (operationId: AdminRealmsRealmOrganizationsOrgIdMembersMemberIdDelete)
	// DELETE /admin/realms/{realm}/organizations/{org-id}/members/{member-id}
	AdminRealmsRealmOrganizationsOrgIdMembersMemberIdDelete(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdMembersMemberIdDeleteParam) error

	// Returns the member of the organization with the specified id
	// Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned (operationId: AdminRealmsRealmOrganizationsOrgIdMembersMemberIdGet)
	// GET /admin/realms/{realm}/organizations/{org-id}/members/{member-id}
	AdminRealmsRealmOrganizationsOrgIdMembersMemberIdGet(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdMembersMemberIdGetParam) (MemberRepresentation, error)

	// Returns the organizations associated with the user that has the specified id
	// (operationId: AdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGet)
	// GET /admin/realms/{realm}/organizations/{org-id}/members/{member-id}/organizations
	AdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGet(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdMembersMemberIdOrganizationsGetParam) ([]OrganizationRepresentation, error)

	// Adds the user with the specified id as a member of the organization
	// Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned (operationId: AdminRealmsRealmOrganizationsOrgIdMembersPost)
	// POST /admin/realms/{realm}/organizations/{org-id}/members
	AdminRealmsRealmOrganizationsOrgIdMembersPost(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdMembersPostParam, req AdminRealmsRealmOrganizationsOrgIdMembersPostReq) error

	// Updates the organization
	// (operationId: AdminRealmsRealmOrganizationsOrgIdPut)
	// PUT /admin/realms/{realm}/organizations/{org-id}
	AdminRealmsRealmOrganizationsOrgIdPut(ctx context.Context, param AdminRealmsRealmOrganizationsOrgIdPutParam, req OrganizationRepresentation) error

	// Creates a new organization
	// (operationId: AdminRealmsRealmOrganizationsPost)
	// POST /admin/realms/{realm}/organizations
	AdminRealmsRealmOrganizationsPost(ctx context.Context, param AdminRealmsRealmOrganizationsPostParam, req OrganizationRepresentation) error
}

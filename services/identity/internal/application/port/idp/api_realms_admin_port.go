// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
//
// Keycloak Admin REST API
//
// This is a REST API reference for the Keycloak Admin REST API.
//
// API version: 1.0

package idp

import (
	"context"
)

type RealmsAdminAPI interface {

	// Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
	// (operationId: AdminRealmsGet)
	// GET /admin/realms
	AdminRealmsGet(ctx context.Context, param AdminRealmsGetParam) ([]RealmRepresentation, error)

	// Import a realm. Imports a realm from a full representation of that realm.
	// Realm name must be unique. (operationId: AdminRealmsPost)
	// POST /admin/realms
	AdminRealmsPost(ctx context.Context, req AdminRealmsPostReq) error

	// Delete all admin events
	// (operationId: AdminRealmsRealmAdminEventsDelete)
	// DELETE /admin/realms/{realm}/admin-events
	AdminRealmsRealmAdminEventsDelete(ctx context.Context, param AdminRealmsRealmAdminEventsDeleteParam) error

	// Get admin events Returns all admin events, or filters events based on URL query parameters listed here
	// (operationId: AdminRealmsRealmAdminEventsGet)
	// GET /admin/realms/{realm}/admin-events
	AdminRealmsRealmAdminEventsGet(ctx context.Context, param AdminRealmsRealmAdminEventsGetParam) ([]AdminEventRepresentation, error)

	// Base path for importing clients under this realm.
	// (operationId: AdminRealmsRealmClientDescriptionConverterPost)
	// POST /admin/realms/{realm}/client-description-converter
	AdminRealmsRealmClientDescriptionConverterPost(ctx context.Context, param AdminRealmsRealmClientDescriptionConverterPostParam, req AdminRealmsRealmClientDescriptionConverterPostReq) (ClientRepresentation, error)

	// (operationId: AdminRealmsRealmClientPoliciesPoliciesGet)
	// GET /admin/realms/{realm}/client-policies/policies
	AdminRealmsRealmClientPoliciesPoliciesGet(ctx context.Context, param AdminRealmsRealmClientPoliciesPoliciesGetParam) (ClientPoliciesRepresentation, error)

	// (operationId: AdminRealmsRealmClientPoliciesPoliciesPut)
	// PUT /admin/realms/{realm}/client-policies/policies
	AdminRealmsRealmClientPoliciesPoliciesPut(ctx context.Context, param AdminRealmsRealmClientPoliciesPoliciesPutParam, req ClientPoliciesRepresentation) error

	// (operationId: AdminRealmsRealmClientPoliciesProfilesGet)
	// GET /admin/realms/{realm}/client-policies/profiles
	AdminRealmsRealmClientPoliciesProfilesGet(ctx context.Context, param AdminRealmsRealmClientPoliciesProfilesGetParam) (ClientProfilesRepresentation, error)

	// (operationId: AdminRealmsRealmClientPoliciesProfilesPut)
	// PUT /admin/realms/{realm}/client-policies/profiles
	AdminRealmsRealmClientPoliciesProfilesPut(ctx context.Context, param AdminRealmsRealmClientPoliciesProfilesPutParam, req ClientProfilesRepresentation) error

	// Get client session stats Returns a JSON map.
	// The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map. (operationId: AdminRealmsRealmClientSessionStatsGet)
	// GET /admin/realms/{realm}/client-session-stats
	AdminRealmsRealmClientSessionStatsGet(ctx context.Context, param AdminRealmsRealmClientSessionStatsGetParam) ([]map[string]string, error)

	// List all client types available in the current realm
	// This endpoint returns a list of both global and realm level client types and the attributes they set (operationId: AdminRealmsRealmClientTypesGet)
	// GET /admin/realms/{realm}/client-types
	AdminRealmsRealmClientTypesGet(ctx context.Context, param AdminRealmsRealmClientTypesGetParam) (ClientTypesRepresentation, error)

	// Update a client type
	// This endpoint allows you to update a realm level client type (operationId: AdminRealmsRealmClientTypesPut)
	// PUT /admin/realms/{realm}/client-types
	AdminRealmsRealmClientTypesPut(ctx context.Context, param AdminRealmsRealmClientTypesPutParam, req ClientTypesRepresentation) error

	// (operationId: AdminRealmsRealmCredentialRegistratorsGet)
	// GET /admin/realms/{realm}/credential-registrators
	AdminRealmsRealmCredentialRegistratorsGet(ctx context.Context, param AdminRealmsRealmCredentialRegistratorsGetParam) ([]string, error)

	// (operationId: AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdDelete)
	// DELETE /admin/realms/{realm}/default-default-client-scopes/{clientScopeId}
	AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdDelete(ctx context.Context, param AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdDeleteParam) error

	// (operationId: AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPut)
	// PUT /admin/realms/{realm}/default-default-client-scopes/{clientScopeId}
	AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPut(ctx context.Context, param AdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPutParam) error

	// Get realm default client scopes.  Only name and ids are returned.
	// (operationId: AdminRealmsRealmDefaultDefaultClientScopesGet)
	// GET /admin/realms/{realm}/default-default-client-scopes
	AdminRealmsRealmDefaultDefaultClientScopesGet(ctx context.Context, param AdminRealmsRealmDefaultDefaultClientScopesGetParam) ([]ClientScopeRepresentation, error)

	// Get group hierarchy.  Only name and ids are returned.
	// (operationId: AdminRealmsRealmDefaultGroupsGet)
	// GET /admin/realms/{realm}/default-groups
	AdminRealmsRealmDefaultGroupsGet(ctx context.Context, param AdminRealmsRealmDefaultGroupsGetParam) ([]GroupRepresentation, error)

	// (operationId: AdminRealmsRealmDefaultGroupsGroupIdDelete)
	// DELETE /admin/realms/{realm}/default-groups/{groupId}
	AdminRealmsRealmDefaultGroupsGroupIdDelete(ctx context.Context, param AdminRealmsRealmDefaultGroupsGroupIdDeleteParam) error

	// (operationId: AdminRealmsRealmDefaultGroupsGroupIdPut)
	// PUT /admin/realms/{realm}/default-groups/{groupId}
	AdminRealmsRealmDefaultGroupsGroupIdPut(ctx context.Context, param AdminRealmsRealmDefaultGroupsGroupIdPutParam) error

	// (operationId: AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdDelete)
	// DELETE /admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}
	AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdDelete(ctx context.Context, param AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdDeleteParam) error

	// (operationId: AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPut)
	// PUT /admin/realms/{realm}/default-optional-client-scopes/{clientScopeId}
	AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPut(ctx context.Context, param AdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPutParam) error

	// Get realm optional client scopes.  Only name and ids are returned.
	// (operationId: AdminRealmsRealmDefaultOptionalClientScopesGet)
	// GET /admin/realms/{realm}/default-optional-client-scopes
	AdminRealmsRealmDefaultOptionalClientScopesGet(ctx context.Context, param AdminRealmsRealmDefaultOptionalClientScopesGetParam) ([]ClientScopeRepresentation, error)

	// Delete the realm
	// (operationId: AdminRealmsRealmDelete)
	// DELETE /admin/realms/{realm}
	AdminRealmsRealmDelete(ctx context.Context, param AdminRealmsRealmDeleteParam) error

	// Get the events provider configuration Returns JSON object with events provider configuration
	// (operationId: AdminRealmsRealmEventsConfigGet)
	// GET /admin/realms/{realm}/events/config
	AdminRealmsRealmEventsConfigGet(ctx context.Context, param AdminRealmsRealmEventsConfigGetParam) (RealmEventsConfigRepresentation, error)

	// Update the events provider Change the events provider and/or its configuration (operationId: AdminRealmsRealmEventsConfigPut)
	// PUT /admin/realms/{realm}/events/config
	AdminRealmsRealmEventsConfigPut(ctx context.Context, param AdminRealmsRealmEventsConfigPutParam, req RealmEventsConfigRepresentation) error

	// Delete all events
	// (operationId: AdminRealmsRealmEventsDelete)
	// DELETE /admin/realms/{realm}/events
	AdminRealmsRealmEventsDelete(ctx context.Context, param AdminRealmsRealmEventsDeleteParam) error

	// Get events Returns all events, or filters them based on URL query parameters listed here
	// (operationId: AdminRealmsRealmEventsGet)
	// GET /admin/realms/{realm}/events
	AdminRealmsRealmEventsGet(ctx context.Context, param AdminRealmsRealmEventsGetParam) ([]EventRepresentation, error)

	// Get the top-level representation of the realm It will not include nested information like User and Client representations.
	// (operationId: AdminRealmsRealmGet)
	// GET /admin/realms/{realm}
	AdminRealmsRealmGet(ctx context.Context, param AdminRealmsRealmGetParam) (RealmRepresentation, error)

	// (operationId: AdminRealmsRealmGroupByPathPathGet)
	// GET /admin/realms/{realm}/group-by-path/{path}
	AdminRealmsRealmGroupByPathPathGet(ctx context.Context, param AdminRealmsRealmGroupByPathPathGetParam) (GroupRepresentation, error)

	// (operationId: AdminRealmsRealmLocalizationGet)
	// GET /admin/realms/{realm}/localization
	AdminRealmsRealmLocalizationGet(ctx context.Context, param AdminRealmsRealmLocalizationGetParam) ([]string, error)

	// (operationId: AdminRealmsRealmLocalizationLocaleDelete)
	// DELETE /admin/realms/{realm}/localization/{locale}
	AdminRealmsRealmLocalizationLocaleDelete(ctx context.Context, param AdminRealmsRealmLocalizationLocaleDeleteParam) error

	// (operationId: AdminRealmsRealmLocalizationLocaleGet)
	// GET /admin/realms/{realm}/localization/{locale}
	AdminRealmsRealmLocalizationLocaleGet(ctx context.Context, param AdminRealmsRealmLocalizationLocaleGetParam) (map[string]string, error)

	// (operationId: AdminRealmsRealmLocalizationLocaleKeyDelete)
	// DELETE /admin/realms/{realm}/localization/{locale}/{key}
	AdminRealmsRealmLocalizationLocaleKeyDelete(ctx context.Context, param AdminRealmsRealmLocalizationLocaleKeyDeleteParam) error

	// (operationId: AdminRealmsRealmLocalizationLocaleKeyGet)
	// GET /admin/realms/{realm}/localization/{locale}/{key}
	AdminRealmsRealmLocalizationLocaleKeyGet(ctx context.Context, param AdminRealmsRealmLocalizationLocaleKeyGetParam) (string, error)

	// (operationId: AdminRealmsRealmLocalizationLocaleKeyPut)
	// PUT /admin/realms/{realm}/localization/{locale}/{key}
	AdminRealmsRealmLocalizationLocaleKeyPut(ctx context.Context, param AdminRealmsRealmLocalizationLocaleKeyPutParam, req AdminRealmsRealmLocalizationLocaleKeyPutReq) error

	// Import localization from uploaded JSON file
	// (operationId: AdminRealmsRealmLocalizationLocalePost)
	// POST /admin/realms/{realm}/localization/{locale}
	AdminRealmsRealmLocalizationLocalePost(ctx context.Context, param AdminRealmsRealmLocalizationLocalePostParam, req AdminRealmsRealmLocalizationLocalePostReq) error

	// Removes all user sessions.
	// Any client that has an admin url will also be told to invalidate any sessions they have. (operationId: AdminRealmsRealmLogoutAllPost)
	// POST /admin/realms/{realm}/logout-all
	AdminRealmsRealmLogoutAllPost(ctx context.Context, param AdminRealmsRealmLogoutAllPostParam) (GlobalRequestResult, error)

	// Partial export of existing realm into a JSON file.
	// (operationId: AdminRealmsRealmPartialExportPost)
	// POST /admin/realms/{realm}/partial-export
	AdminRealmsRealmPartialExportPost(ctx context.Context, param AdminRealmsRealmPartialExportPostParam) error

	// Partial import from a JSON file to an existing realm.
	// (operationId: AdminRealmsRealmPartialImportPost)
	// POST /admin/realms/{realm}/partialImport
	AdminRealmsRealmPartialImportPost(ctx context.Context, param AdminRealmsRealmPartialImportPostParam, req AdminRealmsRealmPartialImportPostReq) error

	// Push the realm's revocation policy to any client that has an admin url associated with it.
	// (operationId: AdminRealmsRealmPushRevocationPost)
	// POST /admin/realms/{realm}/push-revocation
	AdminRealmsRealmPushRevocationPost(ctx context.Context, param AdminRealmsRealmPushRevocationPostParam) (GlobalRequestResult, error)

	// Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
	// This will only update top-level attributes of the realm. (operationId: AdminRealmsRealmPut)
	// PUT /admin/realms/{realm}
	AdminRealmsRealmPut(ctx context.Context, param AdminRealmsRealmPutParam, req RealmRepresentation) error

	// Remove a specific user session.
	// Any client that has an admin url will also be told to invalidate this particular session. (operationId: AdminRealmsRealmSessionsSessionDelete)
	// DELETE /admin/realms/{realm}/sessions/{session}
	AdminRealmsRealmSessionsSessionDelete(ctx context.Context, param AdminRealmsRealmSessionsSessionDeleteParam) error

	// Test SMTP connection with current logged in user
	// (operationId: AdminRealmsRealmTestSMTPConnectionPost)
	// POST /admin/realms/{realm}/testSMTPConnection
	// Deprecated
	AdminRealmsRealmTestSMTPConnectionPost(ctx context.Context, param AdminRealmsRealmTestSMTPConnectionPostParam, req AdminRealmsRealmTestSMTPConnectionPostReq) error

	// (operationId: AdminRealmsRealmUsersManagementPermissionsGet)
	// GET /admin/realms/{realm}/users-management-permissions
	AdminRealmsRealmUsersManagementPermissionsGet(ctx context.Context, param AdminRealmsRealmUsersManagementPermissionsGetParam) (ManagementPermissionReference, error)

	// (operationId: AdminRealmsRealmUsersManagementPermissionsPut)
	// PUT /admin/realms/{realm}/users-management-permissions
	AdminRealmsRealmUsersManagementPermissionsPut(ctx context.Context, param AdminRealmsRealmUsersManagementPermissionsPutParam, req ManagementPermissionReference) (ManagementPermissionReference, error)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: modules/publisher/v1/publisher.proto

package publisherpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PublisherService_FindAllPublishers_FullMethodName = "/publisher.v1.PublisherService/FindAllPublishers"
	PublisherService_FindPublisher_FullMethodName     = "/publisher.v1.PublisherService/FindPublisher"
)

// PublisherServiceClient is the client API for PublisherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherServiceClient interface {
	FindAllPublishers(ctx context.Context, in *PublisherFindAllProtoReq, opts ...grpc.CallOption) (*PublisherFindAllProtoResp, error)
	FindPublisher(ctx context.Context, in *PublisherFindProtoReq, opts ...grpc.CallOption) (*PublisherFindProtoResp, error)
}

type publisherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherServiceClient(cc grpc.ClientConnInterface) PublisherServiceClient {
	return &publisherServiceClient{cc}
}

func (c *publisherServiceClient) FindAllPublishers(ctx context.Context, in *PublisherFindAllProtoReq, opts ...grpc.CallOption) (*PublisherFindAllProtoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublisherFindAllProtoResp)
	err := c.cc.Invoke(ctx, PublisherService_FindAllPublishers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherServiceClient) FindPublisher(ctx context.Context, in *PublisherFindProtoReq, opts ...grpc.CallOption) (*PublisherFindProtoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublisherFindProtoResp)
	err := c.cc.Invoke(ctx, PublisherService_FindPublisher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherServiceServer is the server API for PublisherService service.
// All implementations must embed UnimplementedPublisherServiceServer
// for forward compatibility.
type PublisherServiceServer interface {
	FindAllPublishers(context.Context, *PublisherFindAllProtoReq) (*PublisherFindAllProtoResp, error)
	FindPublisher(context.Context, *PublisherFindProtoReq) (*PublisherFindProtoResp, error)
	mustEmbedUnimplementedPublisherServiceServer()
}

// UnimplementedPublisherServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublisherServiceServer struct{}

func (UnimplementedPublisherServiceServer) FindAllPublishers(context.Context, *PublisherFindAllProtoReq) (*PublisherFindAllProtoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllPublishers not implemented")
}
func (UnimplementedPublisherServiceServer) FindPublisher(context.Context, *PublisherFindProtoReq) (*PublisherFindProtoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPublisher not implemented")
}
func (UnimplementedPublisherServiceServer) mustEmbedUnimplementedPublisherServiceServer() {}
func (UnimplementedPublisherServiceServer) testEmbeddedByValue()                          {}

// UnsafePublisherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherServiceServer will
// result in compilation errors.
type UnsafePublisherServiceServer interface {
	mustEmbedUnimplementedPublisherServiceServer()
}

func RegisterPublisherServiceServer(s grpc.ServiceRegistrar, srv PublisherServiceServer) {
	// If the following call pancis, it indicates UnimplementedPublisherServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublisherService_ServiceDesc, srv)
}

func _PublisherService_FindAllPublishers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherFindAllProtoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).FindAllPublishers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublisherService_FindAllPublishers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).FindAllPublishers(ctx, req.(*PublisherFindAllProtoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublisherService_FindPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherFindProtoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServiceServer).FindPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublisherService_FindPublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServiceServer).FindPublisher(ctx, req.(*PublisherFindProtoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PublisherService_ServiceDesc is the grpc.ServiceDesc for PublisherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublisherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "publisher.v1.PublisherService",
	HandlerType: (*PublisherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllPublishers",
			Handler:    _PublisherService_FindAllPublishers_Handler,
		},
		{
			MethodName: "FindPublisher",
			Handler:    _PublisherService_FindPublisher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/publisher/v1/publisher.proto",
}

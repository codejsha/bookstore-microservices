// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	config2 "github.com/codejsha/bookstore-microservices/catalog/internal/config"
	"github.com/codejsha/bookstore-microservices/catalog/internal/domain/handler"
	"github.com/codejsha/bookstore-microservices/catalog/internal/domain/service"
	"github.com/codejsha/bookstore-microservices/catalog/internal/infrastructure"
	"github.com/codejsha/bookstore-microservices/catalog/internal/infrastructure/adapter/conductor"
	"github.com/codejsha/bookstore-microservices/catalog/internal/infrastructure/adapter/mysql"
	"github.com/codejsha/bookstore-microservices/catalog/internal/infrastructure/adapter/protostub"
	"github.com/codejsha/bookstore-microservices/catalog/internal/infrastructure/adapter/protosvc"
	"github.com/codejsha/bookstore-microservices/catalog/internal/infrastructure/adapter/web"
	"github.com/codejsha/bookstore-microservices/catalog/internal/infrastructure/support"
	"github.com/codejsha/bookstore-microservices/commonlib-go/pkg/config"
	"github.com/codejsha/bookstore-microservices/commonlib-go/pkg/database"
	"github.com/codejsha/bookstore-microservices/commonlib-go/pkg/logging"
	"github.com/codejsha/bookstore-microservices/commonlib-go/pkg/object"
	"github.com/codejsha/bookstore-microservices/commonlib-go/pkg/saga"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeServer(env object.Env, metadata *config.Metadata) *infrastructure.Infra {
	configConfig := config2.NewConfig(env)
	serverConfig := config2.ProvideServerConfig(configConfig)
	appConfig := config2.ProvideAppConfig(configConfig)
	logHelper := logging.NewLogHelper(appConfig)
	databaseConfig := config2.ProvideDatabaseConfig(configConfig)
	dataSource := database.NewDataSource(databaseConfig)
	authorRepo := mysql.NewAuthorRepository(dataSource)
	authorHandler := handler.NewAuthorHandler(authorRepo)
	authorAPI := web.NewAuthorController(authorHandler)
	bookRepo := mysql.NewBookRepository(dataSource)
	bookHandler := handler.NewBookHandler(bookRepo)
	publisherRepo := mysql.NewPublisherRepository(dataSource)
	publisherHandler := handler.NewPublisherHandler(publisherRepo)
	categoryHandler := handler.NewCategoryHandler()
	grpcConfig := config2.ProvideGrpcConfig(configConfig)
	stockGrpcClient := protostub.NewStockGrpcClient(grpcConfig)
	bookUseCase := service.NewBookService(authorHandler, bookHandler, publisherHandler, categoryHandler, stockGrpcClient)
	bookAPI := web.NewBookController(bookUseCase, bookHandler)
	publisherAPI := web.NewPublisherController(publisherHandler)
	categoryAPI := web.NewCategoryController(categoryHandler)
	ginServer := support.NewGinServer(serverConfig, logHelper, authorAPI, bookAPI, publisherAPI, categoryAPI)
	authorGrpcServer := protosvc.NewAuthorGrpcServer(authorHandler)
	bookGrpcServer := protosvc.NewBookGrpcServer(bookUseCase)
	categoryGrpcServer := protosvc.NewCategoryGrpcServer(categoryHandler)
	grpcServer := support.NewGrpcServer(grpcConfig, authorGrpcServer, bookGrpcServer, categoryGrpcServer)
	conductorConfig := config2.ProvideConductorConfig(configConfig)
	workerClient := saga.NewWorkerClient(conductorConfig)
	bookWorker := conductor.NewBookWorker(conductorConfig)
	conductorWorker := support.NewConductorWorker(workerClient, bookWorker)
	telemetryConfig := config2.ProvideTelemetryConfig(configConfig)
	telemetryManager := support.NewTelemetryManager(metadata, telemetryConfig)
	infra := infrastructure.NewInfra(ginServer, grpcServer, conductorWorker, telemetryManager)
	return infra
}

func InitializeMigrationManager(env object.Env) *database.MigrationManager {
	configConfig := config2.NewConfig(env)
	databaseConfig := config2.ProvideDatabaseConfig(configConfig)
	migrationManager := database.NewMigrationManager(databaseConfig)
	return migrationManager
}

// wire.go:

var AppConfigProviderSet = wire.NewSet(config2.ProvideAppConfig)

var ServerConfigProviderSet = wire.NewSet(config2.ProvideServerConfig)

var DatabaseConfigProviderSet = wire.NewSet(config2.ProvideDatabaseConfig)

var ConductorConfigProviderSet = wire.NewSet(config2.ProvideConductorConfig)

var TelemetryConfigProviderSet = wire.NewSet(config2.ProvideTelemetryConfig)

var GrpcConfigProviderSet = wire.NewSet(config2.ProvideGrpcConfig)
